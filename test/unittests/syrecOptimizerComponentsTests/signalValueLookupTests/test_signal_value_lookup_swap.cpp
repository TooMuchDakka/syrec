#include "test_base_signal_value_lookup.hpp"
#include "test_signal_value_lookup_swap.hpp"

using namespace valueLookup;

using UserDefinedDimensionAccess = std::vector<std::optional<unsigned int>>;
using OptionalBitRangeAccess     = std::optional<optimizations::BitRangeAccessRestriction::BitRangeAccess>;

INSTANTIATE_TEST_SUITE_P(
    SignalValueLookupTests,
    SignalValueLookupSwapTest,
    testing::Values(
        std::make_tuple(
            "SwapCompleteSignals",
            []() -> SignalValueLookup::ptr { return nullptr;  },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) { },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapGlobalBitWithBitOfValueOfDimension",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapGlobalBitWithOtherGlobalBit",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapGlobalBitRangeWithBitRangeOfValueOfDimension",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapGlobalBitRangeWithOtherGlobaBitRangeAtSamePosition",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapGlobalBitRangeWithOtherGlobaBitRangeAtAnotherPosition",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapIncompleteDimensionAccessWithGlobalBit",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapIncompleteDimensionAccessWithAnotherIncompleteDimensionAccess",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapIncompleteDimensionAccessWithCompleteSignal",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),

        std::make_tuple(
            "SwapBitOfIncompleteDimensionAccessWithGlobalBit",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitOfIncompleteDimensionAccessWithAnotherIncompleteDimensionAccessOnOtherSignal",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitIncompleteDimensionAccessWithCompleteSignal",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),

        std::make_tuple(
            "SwapBitRangeOfIncompleteDimensionAccessWithCompleteSignal",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitRangeOfIncompleteDimensionAccessWithAnotherIncompleteDimensionAccess",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitRangeOfIncompleteDimensionAccessCompleteSignalWithAnotherIncompleteDimensionAccessBitRange",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitRangeOfIncompleteDimensionAccessWithCompleteDimensionAccess",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitRangeOfIncompleteDimensionAccessWithCompleteDimensionAccessAndBitRange",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapValueOfDimensionFullDimensionAccess",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitOfFullDimensionAccess",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; }),
        std::make_tuple(
            "SwapBitRangeOfFullDimensionAccess",
            []() -> SignalValueLookup::ptr { return nullptr; },
            []() -> SignalValueLookup::ptr { return nullptr; },
            [](const SignalValueLookup::ptr& lhsSwapSignalValueLookup, const SignalValueLookup::ptr& rhsSwapSignalValueLookup) {},
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; },
            [](const UserDefinedDimensionAccess&, const OptionalBitRangeAccess&) { return false; },
            [](const UserDefinedDimensionAccess& accessedDimensions, const OptionalBitRangeAccess& accessedBitRange) -> std::optional<unsigned int> { return std::nullopt; })
    ),
    [](const testing::TestParamInfo<SignalValueLookupSwapTest::ParamType>& info) {
        auto testNameToTransform = std::get<0>(info.param);
        std::replace(testNameToTransform.begin(), testNameToTransform.end(), '-', '_');
        return testNameToTransform;
    });
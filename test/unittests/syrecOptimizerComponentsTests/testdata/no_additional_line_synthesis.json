{
  "DISABLED_TestsForOperationInversionForSubtractionAndXorOperations": {
    "circuit": "",
    "expectedCircuit": "",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl",
      "deadStoreElimON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesChoosesLhsOperandIfOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndRhsOperandIsNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += c; a += b; b -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesChoosesLhsOperandIfOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndRhsOperandIsAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += c; a += b; b -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesChoosesLhsOperandIfOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndRhsOperandIsNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b + 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += b; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesChoosesRhsOperandIfLhsOperandIsNotAssignableSignalButRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b + c)",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) c += b; a += c; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesChoosesRhsOperandIfLhsOperandIsNumberButRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += b; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesChoosesRhsOperandIfLhsOperandWasPreviouslySourceOfConflictButRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += b; c += b; a += c; c -= b; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNumberAndRhsIsNumberAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4)) a += (2 + #a)",
    "expectedCircuit": "module main(inout a(4)) a += 6",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNotAssignableSignalAndRhsIsNumberAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), in b(4)) a += (b + 2)",
    "expectedCircuit": "module main(inout a(4), in b(4)) a += b; a += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNumberAndRhsIsNotAssignableSignalsAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), in b(4)) a += (2 + b)",
    "expectedCircuit": "module main(inout a(4), in b(4)) a += 2; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNotAssignableSignalAndRhsIsNotAssignableSignalsAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b + c)",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) a += b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsAssignableSignalAndRhsOperandIsAssignableSignalButOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNotAssignableSignalAndRhsOperandIsAssignableSignalAndOperationDoesNotHaveAssignmentCounterpart": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b * c)",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNumberAndRhsOperandIsAssignableSignalAndOperationDoesNotHaveAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += (2 * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsAssignableSignalAndRhsOperandIsNotAssignableSignalAndOperationDoesNotHaveAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsAssignableSignalAndRhsOperandIsNumberAndOperationDoesNotHaveAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b * 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsIsAssignableSignalButSourceOfPreviousConflictAndRhsOperandIsAssignableSignalButSourceOfPreviousConflictAndOperationHasAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + c) + b) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a += c; a += b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNotAssignableSignalAndRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(out a(4), in b(4), inout c(4)) a ^= (b - c)",
    "expectedCircuit": "module main(out a(4), in b(4), inout c(4)) a ^= b; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsNumberAndRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(out a(4), inout b(4)) a ^= (2 - b)",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= 2; a -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsIsAssignableSignalButSourceOfPreviousConflictAndRhsOperandIsNotAssignableSignalAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b - c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += b; a -= c; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOnlyLeafNodesCreatesExpressionIfLhsOperandIsAssignableSignalAndRhsOperandIsNumberAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b * 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },


  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafChoosesLhsOperandIfOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndRhsGeneratedExpression": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b + (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += c; b -= 2; a += b; b += 2; b -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafChoosesRhsOperandIfLhsOperandIsAssignableSignalAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= 2; c += b; a += c; c -= b; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafChoosesRhsOperandIfLhsOperandIsNotAssignableSignalAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b + (c - 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) c -= 2; c += b; a += c; c -= b; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafChoosesRhsOperandIfLhsOperandIsNumberAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 + (b - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b -= 2; b += 2; a += b; b -= 2; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },


  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNotAssignableSignalAndRhsGeneratedExpressionAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b - (c + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) a += b; a -= c; a -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNumberAndRhsGeneratedExpressionAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), in b(4)) a += (2 - (b + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4)) a += 2; a -= b; a -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNotAssignableSignalAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b - (c + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) c += 2; a += b; a -= c; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNumberAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 - (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += 2; a -= b; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsAssignableSignalAndRhsGeneratedExpressionAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * (c + 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNotAssignableSignalAndRhsGeneratedExpressionAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b * (c + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) a += (b * (c + 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNumberAndRhsGeneratedExpressionAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), in b(4)) a += (2 * (b + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4)) a += (2 * (b + 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsAssignableSignalAndRhsGeneratedAssignmentAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += (b * c); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNotAssignableSignalAndRhsGeneratedAssignmentAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b * (c + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) c += 2; a += (b * c); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafGeneratesExpressionIfLhsOperandIsNumberAndRhsGeneratedAssignmentAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 * (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += (2 * b); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesLhsOperandGeneratingAssignmentIfRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; b += c; a += b; b -= c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesLhsOperandGeneratingAssignmentIfRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; b -= c; a += b; b += c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesLhsOperandGeneratingAssignmentIfRhsOperandIsNotAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b + 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += 2; b += c; a += b; b -= c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesLhsOperandGeneratingAssignmentIfRhsOperandIsNotAssignableSignalAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b + 2) - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += 2; b -= c; a += b; b += c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesLhsOperandGeneratingAssignmentIfRhsOperandIsNumberAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) + 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; b += 2; a += b; b -= 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesLhsOperandGeneratingAssignmentIfRhsOperandIsNumberAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) - 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; b -= 2; a += b; b += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedAssignmentIfRhsOperandIsNotAssignableSignalAndAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b + 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += 2; a += (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedAssignmentIfRhsOperandIsAssignableSignalAndAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; a += (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedAssignmentIfRhsOperandIsNumberAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) * 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += (b * 2); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(out a(4), inout b(4), inout c(4)) a ^= ((b * 2) - c)",
    "expectedCircuit": "module main(out a(4), inout b(4), inout c(4)) a ^= (b * 2); a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsAssignableSignalAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsNotAssignableSignalAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * 2); a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsNotAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * 2); a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsNotAssignableSignalAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsNumberAndOperationHasAssignmentCounterpartButIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b * 2) - 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += (b * 2); a -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsNumberAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) + 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * 2); a += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsOperandIsNumberAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) * 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b * 2) * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafChoosesRhsOperandIfLhsOperandGeneratedExpressionAndRhsOperandIsAssignableSignalAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += (b * 2); a += c; c -= (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeChoosesRhsOperandIfLhsOperandIsSourceOfConflictAndRhsCreatedAssignmentAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + (c + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += b; c += b; a += c; c -= b; c -= b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeGeneratesExpressionIfLhsOperandIsSourceOfConflictAndRhsCreatedAssignmentAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b - (c + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += b; a -= c; a += b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeGeneratesExpressionIfLhsOperandIsSourceOfConflictAndRhsCreatedAssignmentAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * (c + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += (b * c); a += b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeGeneratesExpressionIfLhsOperandIsSourceOfConflictAndRhsCreatedExpressionAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + (c * 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a += (c * 2); a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeGeneratesExpressionIfLhsOperandIsSourceOfConflictAndRhsCreatedExpressionAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b - (c * 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a -= (c * 2); a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafNodeChoosesLhsOperandIfLhsOperandCreatedAssignmentAndRhsOperandIsSourceOfConflictAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((c + 2) + b) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += b; c += b; a += c; c -= b; c -= b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafNodeGeneratesExpressionIfLhsCreatedAssignmentAndRhsOperandIsSourceOfConflictAndOperationHasAssignmentCounterpartAndIsNotCommutative": {

  },
  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafNodeGeneratesExpressionIfLhsCreatedAssignmentAndRhsOperandIsSourceOfConflictAndOperationHasNoAssignmentCounterpart": {

  },
  "decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafNodeGeneratesExpressionIfLhsCreatedExpressionAndRhsOperandIsSourceOfConflictAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((c * 2) + b) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c * 2); a += b; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafNodeGeneratesExpressionIfLhsCreatedExpressionAndRhsOperandIsSourceOfConflictAndOperationHasAssignmentCounterpartAndIsNotCommutative": {

  },
  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndRhsOperandBeingLeafNodeGeneratesExpressionIfLhsCreatedExpressionAndRhsOperandIsSourceOfConflictAndOperationHasNoAssignmentCounterpart": {

  },


  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeAndRhsBeingAssignmentWithAssignedToSignalPartsInheritedCorrectlyInvertsTheLatterAfterAssignmentCreation": {
    "circuit": "",
    "expectedCircuit": "",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeAndRhsBeingAssignmentWithoutDataDependenciesCorrectlyInvertsTheLatterAfterAssignmentCreation": {

  },
  "DISABLED_decisionAtOperationNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeAndRhsBeingExpressionsWithNoDataDependenciesCorrectlyInvertsTheLatterAfterAssignmentCreation": {

  },
  "DISABLED_decisionAtOperatioNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeAndRhsBeingExpressionWithSubexpressionLhsHavingActiveDataDependenciesAndSubepressionRhsBeingAssignmentCorrectlyInvertedAfterAssignmentCreation": {

  },
  "DISABLED_decisionAtOperatioNodeWithOneLeafNodeAndLhsOperandBeingLeafNodeAndRhsBeingExpressionWithSubexpressionLhsHavingNoActiveDataDependenciesCorrectlyInvertedAfterAssignmentCreation": {

  },

  "decisionAtOperationNodeWithNoLeafNodesChoosesLhsOperandIfLhsOperandGeneratedAssignmentAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) + (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; c -= 2; b += c; c += 2; a += b; c -= 2; b -= c; c += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesChoosesLhsOperandIfLhsOperandGeneratedAssignmentAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) - (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; c -= 2; b -= c; c += 2; a += b; c -= 2; b += c; c += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedAssignmentAndRhsGeneratedAssignmentAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) * (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; c -= 2; a += (b * c); c += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesChoosesLhsOperandIfLhsOperandGeneratedAssignmentAndRhsGeneratedExpressionAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) + (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; b += (c * 2); a += b; b -= (c * 2); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesChoosesLhsOperandIfLhsOperandGeneratedAssignmentAndRhsGeneratedExpressionAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) - (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; b -= (c * 2); a += b; b += (c * 2); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedAssignmentAndRhsGeneratedExpressionAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) * (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; a += (b * (c * 2)); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesChoosesRhsOperandIfLhsOperandGeneratedExpressionAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) + (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += (b * 2); a += c; c -= (b * 2); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsGeneratedAssignmentAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) - (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += (b * 2); a -= c; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsGeneratedAssignmentAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) * (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += ((b * 2) * c); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsGeneratedExpressionAndOperationHasAssignmentCounterpartAndIsCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) + (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * 2); a += (c * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsGeneratedExpressionAndOperationHasAssignmentCounterpartAndIsNotCommutative": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) - (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * 2); a -= (c * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "decisionAtOperationNodeWithNoLeafNodesGeneratesExpressionIfLhsOperandGeneratedExpressionAndRhsGeneratedExpressionAndOperationHasNoAssignmentCounterpart": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) / (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) / (c * 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "DISABLED_decision": {
    "circuit": "",
    "expectedCircuit": "",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "decision": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) e += ((((b - 2) >> #c) + d) - (((a + b) - c) * b))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) b -= 2; d += (b >> 4); b += 2; a += b; a -= c; d -= (a * b); a += c; a -= b; e += d; a += b; a -= c; d += (a * b); a += c; a -= b; b -= 2; d -= (b >> 4); b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "otherDecision": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4), inout g(4)) g += ((b - (c - ((d + a) + e))) + (((a + 2) + (d + f)) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4), inout g(4)) d += a; d += e; d -= c; d -= e; d -= a; b -= d; d += a; d += e; d += c; d -= e; d -= a; a += 2; d += f; a += d; d -= f; a += c; b += a; a -= c; d += f; a -= d; d -= f; a -= 2; g += b; a += 2; d += f; a += d; d -= f; a += c; b -= a; a -= c; d += f; a -= d; d -= f; a -= 2; d += a; d += e; d -= c; d -= e; d -= a; b += d; d += a; d += e; d += c; d -= e; d -= a",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },




  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithAssignmentCounterpartAndLhsOperandAssignableLeafNodeAndRhsOperandBeingExpressionWithoutDependencies": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b - (2 + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b -= 2; b -= c; a += b; b += c; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithAssignmentCounterpartAndLhsOperandAssignableLeafNodeAndRhsOperandBeingExpressionWithADependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b - (d * (2 + (c - 2))))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c -= 2; c += 2; b -= (d * c); c -= 2; c += 2; a += b; c -= 2; c += 2; b += (d * c); c -= 2; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithAssignmentCounterpartAndLhsOperandAssignableLeafNodeAndRhsOperandBeingExpressionWithMultipleDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (b - ((c + 2) * (2 + (d - 2))))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) c += 2; d -= 2; d += 2; b -= (c * d); d -= 2; d += 2; c -= 2; a += b; c += 2; d -= 2; d += 2; b += (c * d); d -= 2; d += 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithAssignmentCounterpartAndLhsOperandAssignableLeafNodeAndRhsOperandBeingAssignmentWithoutDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= 2; c += b; a += c; c -= b; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithAssignmentCounterpartAndLhsOperandAssignableLeafNodeAndRhsOperandBeingAssignmentWithDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (((b + 2) * (d - 2)) + (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) b += 2; d -= 2; c -= 2; c += (b * d); d += 2; b -= 2; a += c; b += 2; d -= 2; c -= (b * d); d += 2; b -= 2; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithAssignmentCounterpartAndLhsOperandAssignableLeafNodeAndRhsOperandBeingAssignmentWithAssignedToSignalPartsInherited": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (2 + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= 2; c += 2; c += b; a += c; c -= b; c -= 2; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsBeingExpressionWithDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * (c >> 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsBeingExpressionWithADataDependency": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b * ((d + (c + 2)) >> 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c += 2; c += d; a += (b * (c >> 2)); c -= d; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsBeingExpressionWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) a += (b * ((d + (c + 2)) / ((e + d) + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) c += 2; c += d; e += d; e += 2; a += (b * (c / e)); e -= 2; e -= d; c -= d; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsBeingAssignmentWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b * (d + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c -= 2; c += d; a += (b * c); c -= d; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsBeingAssignmentWithAssignedToSignalPartsInherited": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b * (2 + (c + d)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c += d; c += 2; a += (b * c); c -= 2; c -= d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += (b * 2); a += c; c -= (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithLhsOperandBeingExpressionWithADataDependencyAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += ((((b - 2) + d) * 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) b -= 2; b += d; c += (b * 2); b -= d; b += 2; a += c; b -= 2; b += d; c -= (b * 2); b -= d; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithLhsOperandBeingExpressionWithMultipleDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) a += ((((b - 2) + d) * ((e + 2) / d)) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) b -= 2; b += d; e += 2; c += (b * (e / d)); e -= 2; b -= d; b += 2; a += c; b -= 2; b += d; e += 2; c -= (b * (e / d)); e -= 2; b -= d; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithLhsOperandBeingAssignmentWithNoDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; b += c; a += b; b -= c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithLhsOperandBeingAssignmentWithADataDependencyAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += ((b + (2 * (d - 2))) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) d -= 2; b += (2 * d); d += 2; b += c; a += b; b -= c; d -= 2; b -= (2 * d); d += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "replayingDataDependenciesInOperationNodeWithoutAssignmentCounterpartWithOneLeafNodeWithLhsBeingExpressionWithNoDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((2 - c) * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithoutAssignmentCounterpartWithOneLeafNodeWithLhsBeingExpressionWithOneNestedOperandHavingDataDependencyAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((2 - (c + 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += ((2 - c) * b); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithoutAssignmentCounterpartWithOneLeafNodeWithLhsBeingExpressionWithADataDependencyAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += (((e + (d - 2)) / (c + 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) d -= 2; d += e; c += 2; a += ((d / c) * b); c -= 2; d -= e; d += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithoutAssignmentCounterpartWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingExpressionWithBothNestedOperandHavingDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += ((((e + (d - 2)) / (c + 2)) * (e * 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) d -= 2; d += e; c += 2; a += (((d / c) * (e * 2)) * b); c -= 2; d -= e; d += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithoutAssignmentCounterpartWithOneLeafNodeWithLhsBeingAssignmentWithoutDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += ((d + (c + 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c += 2; c += d; a += (c * b); c -= d; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOperationWithoutAssignmentCounterpartOneLeafNodeWithLhsBeingAssignmentWithAssignedToSignalPartsBeingInheritedWithMultipleDataDependenciesAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((2 + (c - 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= 2; c += 2; a += (c * b); c -= 2; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },


  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingExpressionWithoutDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((c + 2) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += c; a += 2; a -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingExpressionWithOneOperandsOfNestedExpressionHavingDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (((c + 2) * d) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c += 2; a += (c * d); a -= b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingExpressionWithBothOperandsOfNestedExpressionHavingDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += (((c + 2) * ((d + 2) - e)) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) c += 2; d += 2; d -= e; a += (c * d); a -= b; d += e; d -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingExpressionWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4), inout f(4)) a += ((((c + 2) * ((d + 2) - e)) / ((f + e) - e)) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4), inout f(4)) c += 2; d += 2; d -= e; f += e; f -= e; a += ((c * d) / f); a -= b; f += e; f -= e; d += e; d -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingAssignmentWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; b -= c; a += b; b += c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingAssignmentWithDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) a += ((b - (d + (e + 2))) - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) e += 2; e += d; b -= e; e -= d; e -= 2; b -= c; a += b; b += c; e += 2; e += d; b += e; e -= d; e -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithOneLeafNodeWithNotCommutativeOperationWithAssignmentCounterpartWithLhsOperandBeingAssignmentWithAssignedToSignalPartsInheritedAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) a += ((b + (d + (e + 2))) - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4), inout e(4)) e += 2; e += d; e += b; e -= c; a += e; e += c; e -= b; e -= d; e -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },


  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithAssignedToSignalPartsInheritedAndRhsOperandBeingAssignmentWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((2 + (b - 2)) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b -= 2; b += 2; b += c; a += b; b -= c; b -= 2; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithAssignedToSignalPartsInheritedAndRhsOperandBeingAssignmentWithAssignedToSignalPartsBeingInherited": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += ((2 + (b - 2)) + (d + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) b -= 2; b += 2; c -= 2; c += d; b += c; c -= d; c += 2; a += b; c -= 2; c += d; b -= c; c -= d; c += 2; b -= 2; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithAssignedToSignalPartsInheritedAndRhsOperandBeingAssignmentWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), in c(4), inout d(4), inout e(4)) a += ((2 + (b - c)) + (d + ((e + 2) * (c + 2))))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4), inout d(4), inout e(4)) b -= c; b += 2; e += 2; d += (e * (c + 2)); e -= 2; b += d; e += 2; d -= (e * (c + 2)); e -= 2; a += b; e += 2; d += (e * (c + 2)); e -= 2; b -= d; e += 2; d -= (e * (c + 2)); e -= 2; b -= 2; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingAssignmentWithAssignedToSignalPartsInheritedAndRhsOperandBeingExpressionWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((2 + (b - c)) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b -= c; b += 2; a += (b * c); b -= 2; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingAssignmentWithAssignedToSignalPartsInheritedAndRhsOperandBeingExpressionWithADataDependency": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((2 + (b - c)) * (2 + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b -= c; b += 2; c -= 2; c += 2; a += (b * c); c -= 2; c += 2; b -= 2; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingAssignmentWithAssignedToSignalPartsInheritedAndRhsOperandBeingExpressionWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += ((2 + (b - c)) * ((2 + (c - 2)) * (e + (d - 2))))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) b -= c; b += 2; c -= 2; c += 2; d -= 2; d += e; a += (b * (c * d)); d -= e; d += 2; c -= 2; c += 2; b -= 2; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithMultipleDataDependenciesAndRhsOperandBeingAssignmentWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a ^= ((d - ((c + 2) * (b + 2))) + (e - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) c += 2; b += 2; d -= (c * b); b -= 2; c -= 2; e -= 2; d += e; e += 2; a ^= d; e -= 2; d -= e; e += 2; c += 2; b += 2; d += (c * b); b -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithMultipleDataDependenciesAndRhsOperandBeingAssignmentWithAssignedToSignalPartsBeingInherited": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), in f(4)) a ^= ((d - ((c + 2) * (b + 2))) + (f + (e - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), in f(4)) c += 2; b += 2; d -= (c * b); b -= 2; c -= 2; e -= 2; e += f; d += e; e -= f; e += 2; a ^= d; e -= 2; e += f; d -= e; e -= f; e += 2; c += 2; b += 2; d += (c * b); b -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithMultipleDataDependenciesAndRhsOperandBeingAssignmentWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a += ((b - ((c + 2) * 2)) + ((e + 2) - (d - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) c += 2; b -= (c * 2); c -= 2; e += 2; d -= 2; e -= d; d += 2; b += e; d -= 2; e += d; d += 2; e -= 2; a += b; e += 2; d -= 2; e -= d; d += 2; b -= e; d -= 2; e += d; d += 2; e -= 2; c += 2; b += (c * 2); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingAssignmentWithMultipleDataDependenciesAndRhsOperandBeingExpressionWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a ^= ((d - ((c + 2) * (b + 2))) + (e * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) c += 2; b += 2; d -= (c * b); b -= 2; c -= 2; d += (e * 2); a ^= d; d -= (e * 2); c += 2; b += 2; d += (c * b); b -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingAssignmentWithMultipleDataDependenciesAndRhsOperandBeingExpressionWithADataDependency": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4)) a ^= ((d - ((c + 2) * (b + 2))) + (e * (f - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4)) c += 2; b += 2; d -= (c * b); b -= 2; c -= 2; f -= 2; d += (e * f); f += 2; a ^= d; f -= 2; d -= (e * f); f += 2; c += 2; b += 2; d += (c * b); b -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingAssignmentWithMultipleDataDependenciesAndRhsOperandBeingExpressionWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4), inout g(4), inout h(4)) a ^= ((d - ((c + 2) * (b + 2))) + ((e * (f - 2)) / (g - (h + 2))))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4), inout g(4), inout h(4)) c += 2; b += 2; d -= (c * b); b -= 2; c -= 2; f -= 2; h += 2; g -= h; h -= 2; d += ((e * f) / g); h += 2; g += h; h -= 2; f += 2; a ^= d; f -= 2; h += 2; g -= h; h -= 2; d -= ((e * f) / g); h += 2; g += h; h -= 2; f += 2; c += 2; b += 2; d += (c * b); b -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingAssignmentWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += (b * 2); a += c; c -= (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingAssignmentWithAssignedToSignalPartsBeingInherited": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += ((b * 2) + (2 + (c + d)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c += d; c += 2; c += (b * 2); a += c; c -= (b * 2); c -= 2; c -= d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingAssignmentWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) d += ((a * 2) + (c - ((b + 2) >> 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) b += 2; c -= (b >> 2); b -= 2; c += (a * 2); d += c; c -= (a * 2); b += 2; c += (b >> 2); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingExpressionWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) - (c >> 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * 2); a -= (c >> 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingExpressionWithADataDependency": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) - (2 + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= 2; c += 2; a += (b * 2); a -= c; c -= 2; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithNoDataDependenciesAndRhsOperandBeingExpressionWithMultipleDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += ((b * 2) - ((2 + (c - e)) * ((d + 2) - e)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) c -= e; c += 2; d += 2; d -= e; a += (b * 2); a -= (c * d); d += e; d -= 2; c -= 2; c += e",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithDataDependenciesAndRhsOperandBeingAssignmentWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a += (((b + 2) * ((c - 2) + d)) + (e - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) b += 2; c -= 2; c += d; e -= 2; e += (b * c); c -= d; c += 2; b -= 2; a += e; b += 2; c -= 2; c += d; e -= (b * c); c -= d; c += 2; b -= 2; e += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithDataDependenciesAndRhsOperandBeingAssignmentWithAssignedToSignalPartsInherited": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a += (((b + 2) * ((c - 2) + d)) + (2 + (e - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) b += 2; c -= 2; c += d; e -= 2; e += 2; e += (b * c); c -= d; c += 2; b -= 2; a += e; b += 2; c -= 2; c += d; e -= (b * c); c -= d; c += 2; b -= 2; e -= 2; e += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithDataDependenciesAndRhsOperandBeingExpressionWithNoDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a += (((b + 2) * ((c - 2) + d)) + (e * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) b += 2; c -= 2; c += d; a += (b * c); a += (e * 2); c -= d; c += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithDataDependenciesAndRhsOperandBeingExpressionWithADataDependency": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) a += (((b + 2) * ((c - 2) + d)) + (2 * (e + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4)) b += 2; c -= 2; c += d; e += 2; a += (b * c); a += (2 * e); e -= 2; c -= d; c += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "replayingDataDependenciesInOperationNodeWithNoLeafNodesWithOperationHavingAssignmentCounterpartAndLhsOperandBeingExpressionWithDataDependenciesAndRhsOperandBeingExpressionWithDataDependencies": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4)) a += (((b + 2) * ((c - 2) + d)) + ((f + 2) * (e + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), inout e(4), inout f(4)) b += 2; c -= 2; c += d; f += 2; e += 2; a += (b * c); a += (f * e); e -= 2; f -= 2; c -= d; c += 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },



  "conflictDuringInversionInOperationNodeWithOneLeafNodeAndNotCommutativeOperationWithAssignmentCounterpartAndLhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += ((b - (c - 2)) + (d + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) c -= 2; b -= c; c += 2; d += c; d -= 2; b += d; d += 2; d -= c; a += b; d += c; d -= 2; b -= d; d += 2; d -= c; c -= 2; b += c; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictDuringInversionInOperationNodeWithOneLeafNodeAndCommutativeOperationWithAssignmentCounterpartAndLhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += ((b + (c - 2)) + (d + (c - 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) b += c; b -= 2; d += c; d -= 2; b += d; d += 2; d -= c; a += b; d += c; d -= 2; b -= d; d += 2; d -= c; b += 2; b -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictDuringInversionInOperationNodeWithTwoLeafNodeNotCommutativeOperationWithAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += (((b + 2) * (d - (e - c))) + (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) b += 2; d += c; d -= e; a += (b * d); a += c; a += 2; d += e; d -= c; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictDuringInversionInOperationNodeWithTwoLeafNodeCommutativeOperationWithAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += (((b + 2) * (d - (e + c))) + (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) b += 2; c += e; d -= c; c -= e; a += (b * d); a += c; a += 2; c += e; d += c; c -= e; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },


  "ETODO": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4), in e(4)) a += (((b + 2) * (d + (e + c))) + (c + 2))"
  },

  "conflictAtOperationNodeWithTwoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += b; a += 2; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b + c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += b; a += c; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += b; c += b; a += c; c -= b; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b - 2) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += b; a -= 2; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b - c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += b; a -= c; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b - c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a -= c; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "conflictAtOperationNodeWithTwoLeafNodesAndCommutativeAssignmentOperationWithLhsBeingNumberAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((2 + b) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += 2; a += b; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndCommutativeAssignmentOperationWithLhsNotBeingAssignableSignalAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((c + b) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += c; a += b; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndCommutativeAssignmentOperationWithLhsBeingAssignableSignalAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((c + b) + (c + b))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += c; a += b; a += c; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndNotCommutativeAssignmentOperationWithLhsBeingNumberAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((2 - b) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += 2; a -= b; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndNotCommutativeAssignmentOperationWithLhsNotBeingAssignableSignalAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((c - b) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a += c; a -= b; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithTwoLeafNodesAndNotCommutativeAssignmentOperationWithLhsBeingAssignableSignalAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((c - b) + (c + b))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += c; a -= b; a += c; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "conflictAtOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (c * (b + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a += (c * (b + 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeWithNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingGeneratedAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (c + (b + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += b; c += 2; c += b; a += c; c -= b; c -= 2; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeWithNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b - (c * (b + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a -= (c * (b + 2))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeCommutativeAssignmentOperationWithLhsOperandBeingExpressionAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((c * (b + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c * (b + 2)); a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * (c * (b + 2)))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndWithLhsOperandBeingSourceOfConflictAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * (c + (b + 2)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += b; c += 2; a += (b * c); c -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndWithLhsOperandBeingAssignmentAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((c + (b + 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += b; c += 2; a += (c * b); c -= 2; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndWithLhsOperandBeingExpressionAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((c / (b + 2)) * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "conflictAtOperationNodeWithNoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndLhsGeneratingAssignmentAndRhsOperandGeneratingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + (c + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += b; c += 2; c += b; a += c; c -= b; c -= b; c -= 2; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndLhsGeneratingAssignmentAndRhsOperandGeneratingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + (c * 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a += 2; a += (c * 2); a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandGeneratingExpressionAndRhsOperandBeingSourceOfConflictAndGeneratingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b * 2) + (c + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += (b * 2); c += b; a += c; c -= b; c -= (b * 2); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndCommutativeAssignmentOperationWithLhsOperandGeneratingExpressionAndRhsOperandBeingSourceOfConflictAndGeneratingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((((b + 2) * 2) / (c + 2)) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += (((b + 2) * 2) / c); a += b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndLhsOperandGeneratingAssignmentAndRhsOperandGeneratingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + (c + 2)) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += b; c += 2; c -= b; a += c; c += b; c -= 2; c -= b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingSourceOfConflictAndLhsOperandGeneratingAssignmentAndRhsOperandGeneratingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + (c * 2)) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a += 2; a += (c * 2); a -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingExpressionAndRhsBeingSourceOfConflictandGeneratingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((c + 2) + (b * 2)) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += (b * 2); c -= b; a += c; c += b; c -= (b * 2); c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndNotCommutativeAssignmentOperationWithLhsOperandBeingExpressionAndRhsBeingSourceOfConflictandGeneratingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((((b + 2) * 2) / (c + 2)) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; a += (((b + 2) * 2) / c); a -= b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndSourceOfConflictAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + (c + 2)) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += 2; c += b; c += 2; a += (c * b); c -= 2; c -= b; c -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndSourceOfConflictAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + (c * 2)) * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsOperandBeingSourceOfConflictAndBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((c * 2) + (b + 2)) * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictAtOperationNodeWithNoLeafNodesAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsBeingSourceOfConflictAndBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((c * 2) + ((b + 2) * 2)) * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },


  "creationOfReplacementInOperationWithTwoLeafNodesAndCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b + (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += __rpl1; a += b; b -= __rpl1; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b + (b + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= b; b += c; b += __rpl1; a += b; b -= __rpl1; b -= c; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c + (b + (b + c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += c; b += __rpl1; b += c; a += b; b -= c; b -= __rpl1; b -= c; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInOperationWithTwoLeafNodesAndCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingAssignableSignalAndReplacementGenerationDisabled": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (b + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c += b; c += b; a += c; c -= b; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },

  "creationOfReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b + (b - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= b; b -= 2; b += __rpl1; a += b; b -= __rpl1; b += 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b + (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= b; b -= c; b += __rpl1; a += b; b -= __rpl1; b += c; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingAssignableSignalAndReplacementGenerationDisabled": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a += b; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingPreviousSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c + (b + (b + c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += c; b += __rpl1; b += c; a += b; b -= c; b -= __rpl1; b -= c; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingNumberAndRhsOperandBeingBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout c(4)) a += (c - (2 - c))",
    "expectedCircuit": "module main(inout a(4), inout c(4)) wire __rpl1(4), __rpl2(4) __rpl1 ^= 2; __rpl2 ^= c; __rpl1 -= c; __rpl2 -= __rpl1; __rpl1 += c; a += __rpl2; __rpl1 -= c; __rpl2 += __rpl1; __rpl1 += c; __rpl2 ^= c; __rpl1 ^= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (c - (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) wire __rpl1(4), __rpl2(4) __rpl1 ^= b; __rpl2 ^= c; __rpl1 -= c; __rpl2 -= __rpl1; __rpl1 += c; a += __rpl2; __rpl1 -= c; __rpl2 += __rpl1; __rpl1 += c; __rpl2 ^= c; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingAssignableSignalAndRhsOperandBeingSourceOfConflictAndReplacemetGenerationDisabled": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (c - (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) a += c; a -= b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "creationOfReplacementInOperationWithTwoLeafNodesAndNotCommutativeAssignmentOperationAndLhsOperandBeingAssignableSignalAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c - (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= c; b -= c; __rpl1 -= b; b += c; a += __rpl1; b -= c; __rpl1 += b; b += c; __rpl1 ^= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },

  "creationOfReplacementInOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b + ((b + 2) * c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) b += 2; __rpl1 ^= (b * c); b -= 2; __rpl1 += b; a += __rpl1; __rpl1 -= b; b += 2; __rpl1 ^= (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingInheritedAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b + ((b + 2) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; b += __rpl1; a += b; b -= __rpl1; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingGeneratedAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b + (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += __rpl1; a += b; b -= __rpl1; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b - ((b + 2) * c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4), __rpl2(4) __rpl2 ^= b; b += 2; __rpl1 ^= (b * c); b -= 2; __rpl2 -= __rpl1; b += 2; __rpl1 ^= (b * c); b -= 2; a += __rpl2; b += 2; __rpl1 ^= (b * c); b -= 2; __rpl2 += __rpl1; b += 2; __rpl1 ^= (b * c); b -= 2; __rpl2 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingInheritedAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b - ((b + 2) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; __rpl1 -= b; b -= c; b -= 2; a += __rpl1; b += 2; b += c; __rpl1 += b; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithNotCommutativeAssignmentOperationAndLhsOperandBeingSourceOfConflictAndRhsOperandBeingGeneratedAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b - (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; __rpl1 -= b; b -= 2; a += __rpl1; b += 2; __rpl1 += b; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationAndLhsOperandBeingExpressionAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += __rpl1; a += b; b -= __rpl1; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationAndLhsOperandBeingInheritedAssignmentAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (((b + 2) + c) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; b -= __rpl1; a += b; b += __rpl1; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeWithCommutativeAssignmentOperationAndLhsOperandBeingCreatedAssignmentAndRhsOperandBeingSourceOfConflict": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b -= __rpl1; a += b; b += __rpl1; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },

  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNumberAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4)) a += (2 * 4)",
    "expectedCircuit": "module main(inout a(4)) a += 8",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNumberAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), in b(4)) a += (2 * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNumberAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 * b)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), in b(4)) a += (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },

  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNumberAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 * (b / 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= (b / 2); a += (2 * __rpl1); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (c * (b / 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= (b / 2); a += (c * __rpl1); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c * (b / 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= (b / 2); a += (c * __rpl1); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingExpressionAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b / 2) * 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) wire __rpl1(4) __rpl1 ^= (b / 2); a += (__rpl1 * 2); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingExpressionAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b / 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) wire __rpl1(4) __rpl1 ^= (b / 2); a += (__rpl1 * c); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingExpressionAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b / 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= (b / 2); a += (__rpl1 * c); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNumberAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a += (2 * (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += (2 * b); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingNotAssignableSignalAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (c * (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += 2; a += (c * b); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c * (b + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; a += (c * b); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsOperandBeingNumber": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b + 2) * 2)",
    "expectedCircuit": "module main(inout a(4), inout b(4)) b += 2; a += (b * 2); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += ((b + 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += 2; a += (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; a += (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingReplacementAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) * c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= (b * 2); a += (__rpl1 * c); __rpl1 ^= (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignableSignalAndRhsOperandBeingReplacement": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c * (b * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= (b * 2); a += (c * __rpl1); __rpl1 ^= (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },


  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) * (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += 2; c += 2; a += (b * c); c -= 2; b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingAssignmentAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b + 2) * (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) b += 2; __rpl1 ^= (c * 2); a += (b * __rpl1); __rpl1 ^= (c * 2); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingExpressionAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) * (c + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= (b * 2); c += 2; a += (__rpl1 * c); c -= 2; __rpl1 ^= (b * 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfNoReplacementInTopmostOperationNodeWithOperationWithoutAssignmentCounterpartAndLhsOperandBeingExpressionAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b / 2) * (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4), __rpl2(4) __rpl1 ^= (b / 2); __rpl2 ^= (c * 2); a += (__rpl1 * __rpl2); __rpl2 ^= (c * 2); __rpl1 ^= (b / 2)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },


  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithAssignmentCounterpartAndLhsOperandBeingLeafNodeCausingConflictDetectionBeingReplacedAndRhsGeneratedAssignmentReusesRhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + ((b + 2) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; b += __rpl1; a += b; b -= __rpl1; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithNotCommutativeAssignmentCounterpartAndLhsOperandBeingLeafNodeCausingConflictDetectionBeingReplacedAndRhsGeneratedAssignmentChoosesLhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a ^= (b - ((b + 2) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; __rpl1 -= b; b -= c; b -= 2; a ^= __rpl1; b += 2; b += c; __rpl1 += b; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingLeafNodeCausingConflictDetectionBeingReplacedAndRhsGeneratedAssignmentChoosesNoOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * ((b + 2) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; a += (__rpl1 * b); b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithAssignmentCounterpartAndLhsOperandBeingLeafNodeCausingConflictDetectionBeingReplacedAndRhsGeneratedExpressionChoosesLhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b + ((b + 2) * c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) wire __rpl1(4) b += 2; __rpl1 ^= (b * c); b -= 2; __rpl1 += b; a += __rpl1; __rpl1 -= b; b += 2; __rpl1 ^= (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithNotCommutativeAssignmentCounterpartAndLhsOperandBeingLeafNodeCausingConflictDetectionBeingReplacedAndRhsGeneratedExpressionChoosesLhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b - ((b + 2) * c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4), __rpl2(4) __rpl2 ^= b; b += 2; __rpl1 ^= (b * c); b -= 2; __rpl2 -= __rpl1; b += 2; __rpl1 ^= (b * c); b -= 2; a += __rpl2; b += 2; __rpl1 ^= (b * c); b -= 2; __rpl2 += __rpl1; b += 2; __rpl1 ^= (b * c); b -= 2; __rpl2 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithoutAssignmentCounterpartAndLhsOperandBeingLeafNodeCausingConflictDetectionBeingReplacedAndRhsGeneratedExpressionChoosesNoOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (b * ((b + 2) * c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) b += 2; __rpl1 ^= (b * c); b -= 2; a += (b * __rpl1); b += 2; __rpl1 ^= (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },


  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithAssignmentCounterpartAndLhsOperandGeneratedAssignmentAndRhsBeingLeafNodeCausingConflictDetectionBeingReplacedReusesLhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; b += __rpl1; a += b; b -= __rpl1; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithNotCommutativeAssignmentCounterpartAndLhsOperandGeneratedAssignmentAndRhsBeingLeafNodeCausingConflictDetectionBeingReplacedReusesLhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + c) - b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; b -= __rpl1; a += b; b += __rpl1; b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithNoAssignmentCounterpartAndLhsOperandGeneratedAssignmentAndRhsBeingLeafNodeCausingConflictDetectionBeingReplacedChoosesNoOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) + c) * b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) __rpl1 ^= b; b += 2; b += c; a += (b * __rpl1); b -= c; b -= 2; __rpl1 ^= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithAssignmentCounterpartAndLhsOperandGeneratedExpressionAndRhsBeingLeafNodeCausingConflictDetectionBeingReplacedReusesRhsOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) * c) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) b += 2; __rpl1 ^= (b * c); b -= 2; __rpl1 += b; a += __rpl1; __rpl1 -= b; b += 2; __rpl1 ^= (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithNotCommutativeAssignmentCounterpartAndLhsOperandGeneratedExpressionAndRhsBeingLeafNodeCausingConflictDetectionBeingReplacedChoosesNoOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a ^= (((b + 2) * c) / b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) b += 2; __rpl1 ^= (b * c); b -= 2; a ^= (__rpl1 / b); b += 2; __rpl1 ^= (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementInOperationNodeWithOneLeafNodeAndOperationWithNoAssignmentCounterpartAndLhsOperandGeneratedExpressionAndRhsBeingLeafNodeCausingConflictDetectionBeingReplacedChoosesNoOperand": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b + 2) * c) / b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) wire __rpl1(4) b += 2; __rpl1 ^= (b * c); b -= 2; a += (__rpl1 / b); b += 2; __rpl1 ^= (b * c); b -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },

  "creationOfReplacementOfOperandFromExistingSignalWithNonZeroValueInAssignmentInLoopPlacesInitialValueResetInsideOfLoop": {
    "circuit": "module main(inout a(4), out b(4), in c(4)) b += 2; for 0 to 2 step 1 do a += (c + (c - 2)) rof",
    "expectedCircuit": "module main(inout a(4), out b(4), in c(4)) b ^= 2; for 0 to 2 step 1 do b ^= 2; b ^= c; b -= 2; b += c; a += b; b -= c; b += 2; b ^= c; b ^= 2 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfWholeOperationNodeFromExistingSignalWithNonZeroValueInAssignmentInLoopPlacesInitialResetValueResetAlsoInsideOfLoop": {
    "circuit": "module main(inout a(4), out b(4), in c(4)) b += 2; for 0 to 2 step 1 do a += (c + (c * 2)) rof",
    "expectedCircuit": "module main(inout a(4), out b(4), in c(4)) b ^= 2; for 0 to 2 step 1 do b ^= 2; b ^= (c * 2); b += c; a += b; b -= c; b ^= (c * 2); b ^= 2 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandFromExistingSignalWithNonZeroValueAndExistingSignalPreviouslyUsedInLoopPlacesInitialValueResetPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), out b(4), in c(4)) b += 2; for 0 to 2 step 1 do a += (c + (c - 2)); a += (2 + (c - 2)) rof",
    "expectedCircuit": "module main(inout a(4), out b(4), in c(4)) b ^= 2; for 0 to 2 step 1 do b ^= 2; b ^= c; b -= 2; b += c; a += b; b -= c; b += 2; b ^= c; b ^= 2; b ^= 2; b ^= c; b -= 2; b += 2; a += b; b -= 2; b += 2; b ^= c; b ^= 2 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfWholeOperationFromExistingSignalWithNonZeroValueAndExistingSignalPreviouslyUsedInLoopOperandReplacementPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), out b(4), in c(4)) b += 2; for 0 to 2 step 1 do a += (c + (c - 2)); a += (2 + (c * 2)) rof",
    "expectedCircuit": "module main(inout a(4), out b(4), in c(4)) b ^= 2; for 0 to 2 step 1 do b ^= 2; b ^= c; b -= 2; b += c; a += b; b -= c; b += 2; b ^= c; b ^= 2; b ^= 2; b ^= (c * 2); b += 2; a += b; b -= 2; b ^= (c * 2); b ^= 2 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandFromExistingSignalWithNonZeroValueAndExistingSignalPreviouslyUsedOutsideOfLoopPlacesInitialValueResetPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), out b(4), in c(4)) b ^= 2; a += (c + (c - 2)); for 0 to 2 step 1 do a += (c + (c * 2)) rof",
    "expectedCircuit": "module main(inout a(4), out b(4), in c(4)) b ^= 2; b ^= 2; b ^= c; b -= 2; b += c; a += b; b -= c; b += 2; b ^= c; b ^= 2; for 0 to 2 step 1 do b ^= 2; b ^= (c * 2); b += c; a += b; b -= c; b ^= (c * 2); b ^= 2 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandFromExistingSignalWithZeroValueAndExistingSignalPreviouslyUsedOutsideOfLoopLoopOperandReplacementPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), out b(4), in c(4)) a += (c + (c - 2)); for 0 to 2 step 1 do a += (c + (c * 2)) rof",
    "expectedCircuit": "module main(inout a(4), out b(4), in c(4)) b ^= c; b -= 2; b += c; a += b; b -= c; b += 2; b ^= c; for 0 to 2 step 1 do b ^= (c * 2); b += c; a += b; b -= c; b ^= (c * 2) rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandWithNewSignalWithPriorAssignmentInLoopProcessedPlacesOperandReplacementPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), in c(4)) for 0 to 2 step 1 do a += (c + (c - 2)); a += (c + (c - 2)) rof",
    "expectedCircuit": "module main(inout a(4), in c(4)) wire __rpl1(4) for 0 to 2 step 1 do __rpl1 ^= c; __rpl1 -= 2; __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 += 2; __rpl1 ^= c; __rpl1 ^= c; __rpl1 -= 2; __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 += 2; __rpl1 ^= c rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandWithNewSignalWithPriorAssignmentOutsideOfLoopProcessedPlacesOperandReplacementPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), in c(4)) a += (c + (c - 2)); for 0 to 2 step 1 do a += (c + (c - 2)) rof",
    "expectedCircuit": "module main(inout a(4), in c(4)) wire __rpl1(4) __rpl1 ^= c; __rpl1 -= 2; __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 += 2; __rpl1 ^= c; for 0 to 2 step 1 do __rpl1 ^= c; __rpl1 -= 2; __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 += 2; __rpl1 ^= c rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },

  "creationOfReplacementOfWholeOperationNodeWithNewSignalWithPriorAssignmentInLoopProcessedPlacesOperandReplacementPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), in c(4)) for 0 to 2 step 1 do a += (c + (c - 2)); a += (c + (c * 2)) rof",
    "expectedCircuit": "module main(inout a(4), in c(4)) wire __rpl1(4) for 0 to 2 step 1 do __rpl1 ^= c; __rpl1 -= 2; __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 += 2; __rpl1 ^= c; __rpl1 ^= (c * 2); __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 ^= (c * 2) rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfWholeOperationNodeWithNewSignalWithPriorAssignmentOutsideOfLoopProcessedPlacesOperandReplacementPriorToCurrentAssignmentInLoop": {
    "circuit": "module main(inout a(4), in c(4)) a += (c + (c - 2)); for 0 to 2 step 1 do a += (c + (c * 2)) rof",
    "expectedCircuit": "module main(inout a(4), in c(4)) wire __rpl1(4) __rpl1 ^= c; __rpl1 -= 2; __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 += 2; __rpl1 ^= c; for 0 to 2 step 1 do __rpl1 ^= (c * 2); __rpl1 += c; a += __rpl1; __rpl1 -= c; __rpl1 ^= (c * 2) rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandWithExistingSignalWithNonZeroValueInLoopUsedOnlyInPriorAssignmentInsideOfLoop": {
    "circuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c += 10; for 0 to 2 step 1 do a += (b + (d - 2)); a += (b + (b - 2)) rof",
    "expectedCircuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c ^= 10; for 0 to 2 step 1 do c ^= 10; c ^= d; c -= 2; c += b; a += c; c -= b; c += 2; c ^= d; c ^= 10; c ^= 10; c ^= b; b -= 2; b += c; a += b; b -= c; b += 2; c ^= b; c ^= 10 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfWholeOperationNodeWithExistingSignalWithNonZeroValueInLoopUsedOnlyInPriorAssignmentInsideOfLoop": {
    "circuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c += 10; for 0 to 2 step 1 do a += (b + (d - 2)); a += (b + (b * 2)) rof",
    "expectedCircuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c ^= 10; for 0 to 2 step 1 do c ^= 10; c ^= d; c -= 2; c += b; a += c; c -= b; c += 2; c ^= d; c ^= 10; c ^= 10; c ^= (b * 2); c += b; a += c; c -= b; c ^= (b * 2); c ^= 10 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfOperandWithExistingSignalWithNonZeroValueInLoopUsedOnlyInPriorAssignmentOutsideOfLoop": {
    "circuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c += 10; a += (b + (d - 2)); for 0 to 2 step 1 do a += (b + (b - 2)) rof",
    "expectedCircuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c ^= 10; c ^= 10; c ^= d; c -= 2; c += b; a += c; c -= b; c += 2; c ^= d; c ^= 10; for 0 to 2 step 1 do c ^= 10; c ^= b; b -= 2; b += c; a += b; b -= c; b += 2; c ^= b; c ^= 10 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "creationOfReplacementOfWholeOperationNodeWithExistingSignalWithNonZeroValueInLoopUsedOnlyInPriorAssignmentOutsideOfLoop": {
    "circuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c += 10; a += (b + (d - 2)); for 0 to 2 step 1 do a += (b + (b * 2)) rof",
    "expectedCircuit": "module main(inout a(4), inout b(4), out c(4), in d(4)) c ^= 10; c ^= 10; c ^= d; c -= 2; c += b; a += c; c -= b; c += 2; c ^= d; c ^= 10; for 0 to 2 step 1 do c ^= 10; c ^= (b * 2); c += b; a += c; c -= b; c ^= (b * 2); c ^= 10 rof",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },


  "conflictDuringReplayDetectedInOperationNodeInSamePath": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) c ^= (a + ((a + 2) - b))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },
  "conflictDuringReplayDetectedInOperationNodeInOtherPath": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) d += (((b - (a + 2)) * (c + 2)) + (a + 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += 2; b -= a; a -= 2; c += 2; d += (b * c); d += a; d += 2; c -= 2; a += 2; b += a; a -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1"
    }
  },



  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalChosesLhsOperandAndLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (d + (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) b -= c; b += d; a += b; b -= d; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalChosesLhsOperandAndLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a ^= (d - (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) b -= c; a ^= (d - b); b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentWithNoAdditionOrSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalChosesLhsOperandAndLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (d * (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) b -= c; a += (d * b); b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndAdditionOperationAndRhsBeingNotAssignableSignalChosesNoOperandAndLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4), in c(4), in d(4)) a += (d + (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4), in d(4)) a += d; a += b; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingNotAssignableSignalChosesNoOperandAndLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4), in c(4), in d(4)) a += (d - (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4), in d(4)) a += d; a -= b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingNumberChosesNoOperandAndLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4),in d(4)) a += (d + (b - 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in d(4)) a += d; a += b; a -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalTransformsParentOperation": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a += (d + (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) c -= b; c -= d; a -= c; c += d; c += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsNumberAndSubtractionOperationAndRhsBeingAssignableSignalTransformsParentOperation": {
    "circuit": "module main(inout a(4), inout c(4), in d(4)) a ^= (d + (2 - c))",
    "expectedCircuit": "module main(inout a(4), inout c(4), in d(4)) c -= 2; a ^= (d - c); c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingSourceOfPreviousConflictAndSubtractionOperationAndRhsBeingAssignableSignalTransformsParentOperation": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a ^= (b + (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= b; a ^= (b - c); c += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalTransformsParentOperation": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a += (d - (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) c -= b; c += d; a += c; c -= d; c += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsNumberAndSubtractionOperationAndRhsBeingAssignableSignalTransformsParentOperation": {
    "circuit": "module main(inout a(4), inout c(4), in d(4)) a ^= (d - (2 - c))",
    "expectedCircuit": "module main(inout a(4), inout c(4), in d(4)) c -= 2; c += d; a ^= c; c -= d; c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingSourceOfPreviousConflictAndSubtractionOperationAndRhsBeingAssignableSignalTransformsParentOperation": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b + (d - (b - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c -= b; c += d; c += b; a += c; c -= b; c -= d; c += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentWithNoSubtractionOrAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b * (b - c))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentWithNoSubtractionOrAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsNumberAndSubtractionOperationAndRhsBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (b * (2 - c))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentWithNoSubtractionOrAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingSourceOfPreviousConflictAndSubtractionOperationAndRhsBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b + (d * (b - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += b; a += (d * (b - c))",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },


  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalButSourceOfPreviousConflictLeavesParentAndCurrentOperationNodeUnchanged": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (c + (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) a += c; a += b; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsNumberAndSubtractionOperationAndRhsBeingAssignableSignalButSourceOfPreviousConflictLeavesParentAndCurrentOperationNodeUnchanged": {
    "circuit": "module main(inout a(4), inout c(4)) a += (c + (2 - c))",
    "expectedCircuit": "module main(inout a(4), inout c(4)) a += c; a += 2; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingSourceOfPreviousConflictAndSubtractionOperationAndRhsBeingAssignableSignalButSourceOfPreviousConflictLeavesParentAndCurrentOperationNodeUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c + (b + (b - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += c; a += b; a += b; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingNonAssignableSignalAndSubtractionOperationAndRhsBeingAssignableSignalButSourceOfPreviousConflictLeavesParentAndCurrentOperationNodeUnchanged": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a += (c + (b - (b - c)))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) a += c; a += b; a -= b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsNumberAndSubtractionOperationAndRhsBeingAssignableSignalButSourceOfPreviousConflictLeavesParentAndCurrentOperationNodeUnchanged": {
    "circuit": "module main(inout a(4), inout c(4), in d(4)) a += (c + (d - (2 - c)))",
    "expectedCircuit": "module main(inout a(4), inout c(4), in d(4)) a += c; a += d; a -= 2; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOnlyLeafNodesAndLhsBeingSourceOfPreviousConflictAndSubtractionOperationAndRhsBeingAssignableSignalButSourceOfPreviousConflictLeavesParentAndCurrentOperationNodeUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (c + (b - (b - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += c; a += b; a -= b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },

  "operationTransformationOfParentAdditionOperationAndProcessingOfLhsOperationNodeWithOnlyLeafNodesAndLhsBeingNotAssignableSignalAndSubtractionOperationAndRhsOperandBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a += ((b - c) + d)",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a += b; a -= c; a += d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfLhsOperationNodeWithOnlyLeafNodesAndLhsBeingAssignableSignalButSourceOfPreviousConflictAndSubtractionOperationAndRhsOperandBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (((b - c) + d) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += b; a -= c; a += d; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfLhsOperationNodeWithOnlyLeafNodesAndLhsBeingNotAssignableSignalAndSubtractionOperationAndRhsOperandBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a += ((b - c) - d)",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a += b; a -= c; a -= d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfLhsOperationNodeWithOnlyLeafNodesAndLhsBeingAssignableSignalButSourceOfPreviousConflictAndSubtractionOperationAndRhsOperandBeingAssignableSignalLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (((b - c) - d) + b)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += b; a -= c; a -= d; a += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },

  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOneLeafNodeAndLeafBeingLhsOperandBeingNotAssignableSignalAndSubtractionOperationAndNonLeafOperationNodeGeneratingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (d + (b - c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) b -= c; b += d; a += b; b -= d; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOneLeafNodeAndLeafBeingLhsOperandBeingNotAssignableSignalAndSubtractionOperationAndNonLeafOperationNodeGeneratingAssignment": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) a ^= (d - (b - c))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), in d(4)) c -= b; c += d; a ^= c; c -= d; c += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOneLeafNodeAndLeafBeingLhsOperandBeingNotAssignableSignalAndNotAdditionOrSubtractionOperationAndNonLeafOperationNodeGeneratingExpressionLeavesParentAndCurrentOperationUnchanged": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (d - (b * c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) d -= (b * c); a += d; d += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOneLeafAndLeafBeingLhsBeingNonLeafOperationGeneratingAssignmentAndSubtractionOperationAndRhsOperandBeingLeaf": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a -= ((b - c) - d)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) b -= c; b -= d; a -= b; b += d; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentSubtractionOperationAndProcessingOfOperationNodeWithOneLeafAndLeafBeingLhsBeingNonLeafOperationGeneratingExpressionAndSubtractionOperationAndRhsOperandBeingLeaf": {
    "circuit": "module main(inout a(4), in b(4), in c(4), inout d(4)) a += (c - ((b - c) - d))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4), inout d(4)) d += c; d -= b; d += c; a += d; d -= c; d += b; d -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOneLeafAndLeafBeingLhsBeingNonLeafOperationGeneratingAssignmentAndSubtractionOperationAndRhsOperandBeingLeaf": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), inout d(4)) a += (b + ((b + c) - d))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), inout d(4)) c += b; c -= d; c += b; a += c; c -= b; c += d; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentAdditionOperationAndProcessingOfOperationNodeWithOneLeafAndLeafBeingLhsBeingNonLeafOperationGeneratingExpressionAndSubtractionOperationAndRhsOperandBeingLeaf": {
    "circuit": "module main(inout a(4), in b(4), inout c(4), inout d(4)) a += (b + ((b * c) - d))",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4), inout d(4)) d -= (b * c); d -= b; a -= d; d += b; d += (b * c)",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentNodeWithAdditionOperationAndProcessingOfOperationNodeWithOneLeafBeingRhsOperandSubtractionOperationAndNonLeafGeneratingAssignmentWithBacktrackingCorrectlyResettingInversionFlag": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (c + (((c + b) + (b - d)) + d))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += c; a += c; a += b; a += b; a -= d; a += d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentNodeWithSubtractionOperationAndProcessingOfOperationNodeWithOneLeafBeingRhsOperandSubtractionOperationAndNonLeafGeneratingAssignmentWithBacktrackingCorrectlyResettingInversionFlag": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (c + (((c + b) - (b - d)) + d))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += c; a += c; a += b; a -= b; a += d; a += d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "operationTransformationOfParentNodeWithNoAdditionOrSubtractionOperationAndProcessingOfOperationNodeWithOneLeafBeingRhsOperandSubtractionOperationAndNonLeafGeneratingAssignmentWithBacktrackingCorrectlyResettingInversionFlag": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (c + (((c + b) * (b - d)) + d))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += c; a += ((c + b) * (b - d)); a += d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },


  "DISABLED_doubleSubtractionTransformationInOperationNodeWithOneLeafNode": {
    "circuit": "",
    "expectedCircuit": "",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },

  "DISABLED_doubleSubtractionTransformationInOperationNodeWithOneLeafNodeWithLhsOperandBeingAssignableSignalAndRhsOperandBeingExpressionWithNestedLhsOperandBeingAssignableSignalAndNestedRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (b - (c - d))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) d -= c; d += b; a += d; d -= b; d += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInOperationNodeWithOneLeafNodeWithLhsOperandBeingAssignableSignalAndRhsOperandBeingExpressionWithNestedLhsOperandBeingAssignableSignalAndNestedRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) a += (b - (c - d))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), in d(4)) c -= d; b -= c; c += d; a += c; c -= d; b += c; c -= d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInOperationNodeWithOneLeafNodeWithLhsOperandBeingAssignableSignalAndRhsOperandBeingExpressionWithNestedLhsOperandBeingAssignableSignalAndNestedRhsOperandBeingBlockedByPreviousConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) a += (b - (c - ((d + 2) - d)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4), inout d(4)) c -= d; c -= 2; c -= d; b -= c; c += d; c += 2; c += d; a += b; c -= d; c -= 2; c -= d; b += c; c += d; c += 2; c += d",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInOperationNodeWithOneLeafNodeWithLhsOperandBeingAssignableSignalAndRhsOperandBeingExpressionWithNestedLhsOperandBlockedByPreviousConflictAndNestedRhsOperandBeingBlockedByPreviousConflict": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += (((b - 2) - b) - ((c + 2) + c))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) a += b; a -= 2; a -= b; a -= c; a -= 2; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },

  "DISABLED_doubleSubtractionTransformationInOperationNodeWithNoLeafNodeAndLhsOperandBeingAssignmentAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b - 2) - (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b -= 2; c -= 2; b -= c; c += 2; a += b; c -= 2; b += c; c += 2; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInOperationNodeWithNoLeafNodeAndLhsOperandBeingExpressionAndRhsOperandBeingAssignment": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b * 2) - (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) c -= 2; a += ((b * 2) - c); c += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInOperationNodeWithNoLeafNodeAndLhsOperandBeingAssignmentAndRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a += ((b - 2) - (c * 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b -= 2; b -= (c * 2); a += b; b += (c * 2); b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInOperationNodeWithNoLeafNodeAndLhsOperandBeingExpressiondRhsOperandBeingExpression": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += ((b - 2) - (c - 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) a += b; a -= 2; a -= c; a += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },

  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionBeingNumber": {
    "circuit": "module main(inout a(4)) a -= 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingAssignableSignalAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a -= (b - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) a -= b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingNotAssignableSignalAndRhsOperandBeingNotAssignableSignal": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a -= (b - c)",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) a -= b; a += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingNotAssignableSignalAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a -= (b - c)",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) c -= b; a += b; c += b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingAssignableSignalAndRhsOperandBeingAssignableSignal": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a -= (b - c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b -= c; a -= b; b += c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingAssignableSignalAndRhsOperandBeingAssignableSignalWithOperandBeingNotSubtraction": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a -= (b + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b += c; a -= b; b -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingNotAssignableSignalAndRhsOperandBeingAssignableSignalWithOperandBeingNotSubtraction": {
    "circuit": "module main(inout a(4), in b(4), inout c(4)) a -= (b + c)",
    "expectedCircuit": "module main(inout a(4), in b(4), inout c(4)) c += b; a -= c; c -= b",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingNotAssignableSignalAndRhsOperandBeingNotAssignableSignalWithOperandBeingNotSubtraction": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a -= (b + c)",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) a -= b; a -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionWithRhsExpressionHavingTwoLeafNodesWithLhsOperandBeingAssignableSignalAndRhsOperandBeingNotAssignableSignalWithOperandBeingNotSubtraction": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a -= (b + c)",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += c; a -= b; b -= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },
  "DISABLED_doubleSubtractionTransformationInTopmostOperationNodeWithOriginalAssignmentBeingSubtractionAndNestedExpressionHavingNoLeafNodes": {
    "circuit": "module main(inout a(4), inout b(4), inout c(4)) a -= ((b - 2) - (c - 2))",
    "expectedCircuit": "module main(inout a(4), inout b(4), inout c(4)) b -= 2; c -= 2; b -= c; c += 2; a -= b; c -= 2; b += c; c += 2; b += 2",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineTransformationOfSubtractionAndAdditionCascadeEnabled": "1"
    }
  },

  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningAdditionAndAssignedToSignalIsZeroIntoTwoSubassignments": {
    "circuit": "module main(out a(4), inout b(4)) a += (b + (2 - b))",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= b; a += 2; a -= b"
  },
  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningSubtractionAndAssignedToSignalIsZeroIntoTwoSubassignments": {
    "circuit": "module main(out a(4), inout b(4)) a += (b - (2 - b))",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= b; a -= 2; a += b"
  },
  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningAdditionAndAssignedToSignalIsNotZeroIntoTwoSubassignments": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b + (2 - b))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += b; a += 2; a -= b"
  },
  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningSubtractionAndAssignedToSignalIsNotZeroIntoTwoSubassignments": {
    "circuit": "module main(inout a(4), inout b(4)) a += (b - (2 - b))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += b; a -= 2; a += b"
  },
  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningXorIntoTwoSubassignmentsIfAssignedToSignalIsZero": {
    "circuit": "module main(out a(4), inout b(4)) a += ((b ^ 2) ^ (2 - b))",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= b; a ^= 2; a ^= (2 - b)"
  },
  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsNotZeroCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a += ((b ^ 2) ^ (2 - b))"
  },
  "splitOfTopmostAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsNotZeroButBlockedByDataflowAnalysisCreatesOnlyOneAssignment": {
    "circuit": "module main(out a(4), inout b(4)) for 0 to 2 step 1 do a += ((b ^ 2) ^ (2 - b)) rof"
  },
  "splitOfTopmostAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningAdditionIntoTwoSubassignments": {
    "circuit": "module main(inout a(4), inout b(4)) a -= (b + (2 - b))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a -= b; a -= 2; a += b"
  },
  "splitOfTopmostAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningSubtractionIntoTwoSubassignments": {
    "circuit": "module main(inout a(4), inout b(4)) a -= (b - (2 - b))",
    "expectedCircuit": "module main(inout a(4), inout b(4)) a += 2; a -= b; a -= b"
  },
  "splitOfTopmostAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsZeroCreatesOnlyOneAssignment": {
    "circuit": "module main(out a(4), inout b(4)) a -= (b ^ (2 - b))"
  },
  "splitOfTopmostAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsNotZeroCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a -= (b ^ (2 - b))"
  },
  "splitOfTopmostAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsNotZeroButBlockedByDataflowAnalysisCreatesOnlyOneAssignment": {
    "circuit": "module main(out a(4), inout b(4)) for 0 to 2 step 1 do a -= ((b ^ 2) ^ (2 - b)) rof"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningAdditionWithAssignedToSignalHavingValueZeroIntoTwoSubassignments": {
    "circuit": "module main(out a(4), inout b(4)) a ^= (b + (2 - b))",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= b; a += 2; a -= b"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningSubtractionWithAssignedToSignalHavingValueZeroIntoTwoSubassignments": {
    "circuit": "module main(out a(4), inout b(4)) a ^= (b - (2 - b))",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= b; a -= 2; a += b"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningXorWithAssignedToSignalHavingValueZeroIntoTwoSubassignments": {
    "circuit": "module main(out a(4), inout b(4)) a ^= ((b ^ 2) ^ (2 - b))",
    "expectedCircuit": "module main(out a(4), inout b(4)) a ^= b; a ^= 2; a ^= (2 - b)"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningAdditionAndAssignedToSignalIsNotZeroCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a ^= (b + (2 - b))"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningSubtractionAndAssignedToSignalIsNotZeroCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a ^= (b - (2 - b))"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsNotZeroCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4)) a ^= (b ^ (2 - b))"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningAdditionAndAssignedToSignalIsNotZeroButBlockedByDataflowAnalysisCreatesOnlyOneAssignment": {
    "circuit": "module main(out a(4), inout b(4)) for 0 to 2 step 1 do a ^= ((b ^ 2) + (2 - b)) rof"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningSubtractionAndAssignedToSignalIsNotZeroButBlockedByDataflowAnalysisCreatesOnlyOneAssignment": {
    "circuit": "module main(out a(4), inout b(4)) for 0 to 2 step 1 do a ^= ((b ^ 2) - (2 - b)) rof"
  },
  "splitOfTopmostAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningXorAndAssignedToSignalIsNotZeroButBlockedByDataflowAnalysisCreatesOnlyOneAssignment": {
    "circuit": "module main(out a(4), inout b(4)) for 0 to 2 step 1 do a ^= ((b ^ 2) ^ (2 - b)) rof"
  },

  "splitOfSubAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningAdditionCreatesTwoSubAssignments": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b + ((c * 2) + c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += (c * 2); b += c; b += 2; a += b; b -= 2; b -= (c * 2); b -= c"
  },
  "splitOfSubAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningSubtractionCreatesTwoSubAssignments": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b + ((c * 2) - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += (c * 2); b -= c; b += 2; a += b; b -= 2; b += c; b -= (c * 2)"
  },
  "splitOfSubAssignmentWithAddAssignOperationAndTopmostRhsExprDefiningXorCreatesOneOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b + ((c * 2) ^ c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += ((c * 2) ^ c); b += 2; a += b; b -= 2; b -= ((c * 2) ^ c)"
  },
  "splitOfSubAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningAdditionCreatesTwoSubAssignments": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b - ((c * 2) + c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b -= (c * 2); b -= c; b += 2; a += b; b -= 2; b += (c * 2); b += c"
  },
  "splitOfSubAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningSubtractionCreatesTwoSubAssignments": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b - ((c * 2) - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b += c; b -= (c * 2); b += 2; a += b; b -= 2; b += (c * 2); b -= c"
  },
  "splitOfSubAssignmentWithMinusAssignOperationAndTopmostRhsExprDefiningXorCreatesOneOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b - ((c * 2) ^ c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b -= ((c * 2) ^ c); b += 2; a += b; b -= 2; b += ((c * 2) ^ c)"
  },
  "splitOfSubAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningAdditionCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b ^ ((c * 2) + c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b ^= ((c * 2) + c); b += 2; a += b; b -= 2; b ^= ((c * 2) + c)"
  },
  "splitOfSubAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningSubtractionCreatesOnlyOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b ^ ((c * 2) - c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b ^= ((c * 2) - c); b += 2; a += b; b -= 2; b ^= ((c * 2) - c)"
  },
  "splitOfSubAssignmentWithXorAssignOperationAndTopmostRhsExprDefiningXorCreatesOneOneAssignment": {
    "circuit": "module main(inout a(4), inout b(4), in c(4)) a += (2 + (b - ((c * 2) ^ c)))",
    "expectedCircuit": "module main(inout a(4), inout b(4), in c(4)) b -= ((c * 2) ^ c); b += 2; a += b; b -= 2; b += ((c * 2) ^ c)"
  },
  "splitOfSubAssignmentCreatedAsExpressionReplacementWithReplacementBeingNewSignalAndAddOperationAsOperationOfExpr": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b + (c + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) wire __rpl1(4) __rpl1 ^= c; __rpl1 += 2; __rpl1 += b; a += __rpl1; __rpl1 -= b; __rpl1 -= 2; __rpl1 ^= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "splitOfSubAssignmentCreatedAsExpressionReplacementWithReplacementBeingNewSignalAndXorOperationAsOperationOfExpr": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b + (c - 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) wire __rpl1(4) __rpl1 ^= c; __rpl1 -= 2; __rpl1 += b; a += __rpl1; __rpl1 -= b; __rpl1 += 2; __rpl1 ^= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "splitOfSubAssignmentCreatedAsExpressionReplacementWithReplacementBeingNewSignalAndSubtractionOperationAsOperationOfExpr": {
    "circuit": "module main(inout a(4), in b(4), in c(4)) a += (b + (c ^ 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4)) wire __rpl1(4) __rpl1 ^= c; __rpl1 ^= 2; __rpl1 += b; a += __rpl1; __rpl1 -= b; __rpl1 ^= 2; __rpl1 ^= c",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "splitOfSubAssignmentCreatedAsExpressionReplacementWithReplacementBeingExitingSignalAndAddOperationAsOperationOfExpr": {
    "circuit": "module main(inout a(4), in b(4), in c(4), out d(4)) d += 10; a += (b + (c + 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4), out d(4)) d ^= 10; d ^= 10; d ^= c; d += 2; d += b; a += d; d -= b; d -= 2; d ^= c; d ^= 10",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "splitOfSubAssignmentCreatedAsExpressionReplacementWithReplacementBeingExistingSignalAndSubtractionOperationAsOperationOfExpr": {
    "circuit": "module main(inout a(4), in b(4), in c(4), out d(4)) d += 10; a += (b + (c - 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4), out d(4)) d ^= 10; d ^= 10; d ^= c; d -= 2; d += b; a += d; d -= b; d += 2; d ^= c; d ^= 10",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  },
  "splitOfSubAssignmentCreatedAsExpressionReplacementWithReplacementBeingExistingSignalAndXorOperationAsOperationOfExpr": {
    "circuit": "module main(inout a(4), in b(4), in c(4), out d(4)) d += 10; a += (b + (c ^ 2))",
    "expectedCircuit": "module main(inout a(4), in b(4), in c(4), out d(4)) d ^= 10; d ^= 10; d ^= c; d ^= 2; d += b; a += d; d -= b; d ^= 2; d ^= c; d ^= 10",
    "optimizations": {
      "noAddLineSynAlwaysUseGenByChoiceAssignmentsON": "1",
      "noAddLineSynNewSignalPrefix": "__rpl"
    }
  }
}
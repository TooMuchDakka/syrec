{
  "TODO": "Tests to check combinations e.g. one dimension of lhs with whole signal on the right if dimension match",
  "bothSignalsTotal": {
    "circuit": "module main(out a(10), out b(10)) a <=> b"
  },
  "oneBitOfLhs": {
    "circuit": "module main(out a(10), out b(1)) a.0 <=> b"
  },
  "bitRangeOfLhs": {
    "circuit": "module main(out a(10), out b(3)) a.2:5 <=> b"
  },
  "oneDimensionOfLhs": {
    "circuit": "module main(out a[2](10), out b(10)) a[1] <=> b"
  },
  "oneBitOfOneDimensionOfLhs": {
    "circuit": "module main(out a[2](10), out b(1)) a[1].4 <=> b"
  },
  "bitRangeOfOneDimensionOfLhs": {
    "circuit": "module main(out a[2](10), out b(3)) a[1].2:5 <=> b"
  },
  "nestedDimensionOfLhs": {
    "circuit": "module main(out a[2][4][8](10), out b(10)) a[1][3][7] <=> b"
  },
  "oneBitOfNestedDimensionOfLhs": {
    "circuit": "module main(out a[2][4][8](10), out b(1)) a[1][3][7].8 <=> b"
  },
  "bitRangeOfNestedDimensionOfLhs": {
    "circuit": "module main(out a[2][4][8](10), out b(3)) a[1][3][7].2:5 <=> b"
  },

  "oneBitOfRhs": {
    "circuit": "module main(out a(10), out b(1)) b <=> a.0"
  },
  "bitRangeOfRhs": {
    "circuit": "module main(out a(10), out b(3)) b <=> a.2:5"
  },
  "oneDimensionOfRhs": {
    "circuit": "module main(out a[2](10), out b(10)) b <=> a[1]"
  },
  "oneBitOfOneDimensionOfRhs": {
    "circuit": "module main(out a[2](10), out b(1)) b <=> a[1].4"
  },
  "bitRangeOfOneDimensionOfRhs": {
    "circuit": "module main(out a[2](10), out b(3)) b <=> a[1].2:5"
  },
  "nestedDimensionOfRhs": {
    "circuit": "module main(out a[2][4][8](10), out b(10)) b <=> a[1][3][7]"
  },
  "oneBitOfNestedDimensionOfRhs": {
    "circuit": "module main(out a[2][4][8](10), out b(1)) b <=> a[1][3][7].8"
  },
  "bitRangeOfNestedDimensionOfRhs": {
    "circuit": "module main(out a[2][4][8](10), out b(3)) b <=> a[1][3][7].2:5"
  }
}
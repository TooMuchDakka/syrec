{
  "rangeAsOnlyInitialValue": {
    "circuit": "module main() for 2 do skip rof",
    "expectedCircuit": "module main() for 0 to 2 step 1 do skip rof"
  },
  "rangeAsInitialValueWithPositiveStepSize": {
    "circuit": "module main() for 2 step 2 do skip rof",
    "expectedCircuit": "module main() for 0 to 2 step 2 do skip rof"
  },
  "rangeAsInitialValueWithNegativeStepSize": {
    "circuit": "module main() for 2 step -2 do skip rof",
    "expectedCircuit": "module main() for 2 to 0 step -2 do skip rof"
  },
  "rangeWithInitialValueAsExpression": {
    "circuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for ($i - (6 + 10)) do skip rof rof",
    "expectedCircuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for 0 to ($i - 16) step 1 do skip rof rof"
  },
  "rangeWithEndValueAsExpression": {
    "circuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for $j = 0 to ($i - (6 + 10)) do skip rof rof",
    "expectedCircuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for $j = 0 to ($i - 16) step 1 do skip rof rof"
  },
  "fullRangeWithoutStepsize": {
    "circuit": "module main() for 0 to 2 do skip rof",
    "expectedCircuit": "module main() for 0 to 2 step 1 do skip rof"
  },
  "fullRangeWithPositiveStepsize": {
    "circuit": "module main() for 0 to 2 step 2 do skip rof"
  },
  "fullRangeWithNegativeStepsize": {
    "circuit": "module main() for 2 to 0 step -2 do skip rof"
  },
  "loopVariableWithoutStepsize": {
    "circuit": "module main() for $i = 0 to 4 do skip rof",
    "expectedCircuit": "module main() for $i = 0 to 4 step 1 do skip rof"
  },
  "loopVariableWithPositiveStepsize": {
    "circuit": "module main() for $i = 0 to 4 step 2 do skip rof"
  },
  "loopVariableWithNegativeStepsize": {
    "circuit": "module main() for $i = 4 to 0 step -2 do skip rof"
  },
  "stepSizeAsExpression": {
    "circuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for 2 step (2 + ($i - #a)) do skip rof rof",
    "expectedCircuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for 0 to 2 step (2 + ($i - 16)) do skip rof rof"
  },
  "parentLoopVariableUsedInNestedLoop": {
    "circuit": "module main(in a(16)) for $i = 0 to 5 step 1 do for $j = ($i + 1) to ($i + (2 * $i)) step 1 do skip rof rof"
  },
  "usageOfLoopVariableInAnyExpressionExceptInitialValueOk": {
    "circuit": "module main() for $i = 0 to ($i + (2 + $i)) step ($i + 1) do skip rof"
  },
  "singleStatementInBody": {
    "circuit": "module main() for 2 step 1 do skip rof",
    "expectedCircuit": "module main() for 0 to 2 step 1 do skip rof"
  },
  "multipleStatementsInBody": {
    "circuit": "module main(in a[2](8), in b[2](16), out c[2](16)) for 2 step 1 do c[0] += (a[0].0:3 + b[0].5:8); skip; ++= c[0]; c[0] <=> c[1] rof",
    "expectedCircuit": "module main(in a[2](8), in b[2](16), out c[2](16)) for 0 to 2 step 1 do c[0] += (a[0].0:3 + b[0].5:8); skip; ++= c[0]; c[0] <=> c[1] rof"
  },
  "reusingLoopVariableNameInAnotherLoopAfterPreviousOneWasLeft": {
    "circuit": "module main() for $a = 0 to 2 step 1 do skip rof; for $a = 0 to 5 step 1 do skip; skip rof"
  },
  "selfReferenceOfLoopVariableOkInEndValueDefinition": {
    "circuit": "module main() for $a = 0 to ($a + 2) step 1 do skip rof"
  },
  "selfReferenceOfLoopVariableOkInStepsizeDefinition": {
    "circuit": "module main() for $a = 0 to 2 step (2 + ($a + 2)) do skip rof"
  },
  "stepSizeZeroDoesNotCreateErrorIfStartAndEndValueAreCompileTimeConstantAndAreEqualToEachOther": {
    "circuit": "module main() for $a = 2 to 2 step 0 do skip rof"
  },
  "stepSizeZeroDoesNotCreateErrorIfStartIsCompileTimeConstantAndEndValueIsExpressionThatDoesNotEvaluateToConstant": {
    "circuit": "module main(in b(4)) for $j = 0 to 5 step 1 do for $a = 2 to ($j + (#b + 2)) step 0 do skip rof rof",
    "expectedCircuit": "module main(in b(4)) for $j = 0 to 5 step 1 do for $a = 2 to ($j + 6) step 0 do skip rof rof"
  },
  "stepSizeZeroDoesNotCreateErrorIfStartIsExpressionThatDoesNotEvaluateToConstantAndEndIsCompileTimeConstant": {
    "circuit": "module main(in b(4)) for $j = 0 to 5 step 1 do for $a = ($j + (#b + 2)) to 2 step 0 do skip rof rof",
    "expectedCircuit": "module main(in b(4)) for $j = 0 to 5 step 1 do for $a = ($j + 6) to 2 step 0 do skip rof rof"
  },
  "stepSizeZeroDoesNotCreateErrorIfStartAndAndAreExpressionsThatDoNotEvaluateToConstant": {
    "circuit": "module main(in b(4)) for $j = 0 to 5 step 1 do for $a = (#b + $j) to ($j + (#b + 2)) step 0 do skip rof rof",
    "expectedCircuit": "module main(in b(4)) for $j = 0 to 5 step 1 do for $a = (4 + $j) to ($j + 6) step 0 do skip rof rof"
  }
}
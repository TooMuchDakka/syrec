{
  "rangeAsOnlyInitialValue": {
    "circuit": "module main() for 2 do skip rof",
    "expectedCircuit": "module main() for 2 step 1 do skip rof"
  },
  "rangeAsInitialValueWithPositiveStepSize": {
    "circuit": "module main() for 2 step 2 do skip rof"
  },
  "rangeAsInitialValueWithNegativeStepSize": {
    "circuit": "module main() for 2 step -2 do skip rof"
  },
  "fullRangeWithoutStepsize": {
    "circuit": "module main() for 0 to 2 do skip rof",
    "expectedCircuit": "module main() for 0 to 2 step 1 do skip rof"
  },
  "fullRangeWithPositiveStepsize": {
    "circuit": "module main() for 0 to 2 step 2 do skip rof"
  },
  "fullRangeWithNegativeStepsize": {
    "circuit": "module main() for 2 to 0 step -2 do skip rof"
  },
  "loopVariableWithoutStepsize": {
    "circuit": "module main() for $i = 0 to 4 do skip rof",
    "expectedCircuit": "module main() for $i to 4 step 1 do skip rof"
  },
  "loopVariableWithPositiveStepsize": {
    "circuit": "module main() for $i = 0 to 4 step 2 do skip rof"
  },
  "loopVariableWithNegativeStepsize": {
    "circuit": "module main() for $i = 4 to 0 step -2 do skip rof"
  },
  "singleStatementInBody": {
    "circuit": "module main() for 2 step 1 do skip rof"
  },
  "multipleStatementsInBody": {
    "circuit": "module main(in a[2](8), in b[2](16), out c[2](16)) for 2 step 1 do c[0] += (a[0].0:3 + b[0].5:8); skip; ++= c[0]; c[0] <=> c[1] rof"
  },
  "reusingLoopVariableNameInAnotherLoopAfterPreviousOneWasLeft": {
    "circit": "module main() for $a = 0 to 2 do skip rof for $a = 0 to 5 step 1 skip; skip rof"
  }
}
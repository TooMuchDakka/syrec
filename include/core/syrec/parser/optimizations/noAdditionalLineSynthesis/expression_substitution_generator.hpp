#ifndef EXPRESSION_SUBSTITUTION_GENERATOR_HPP
#define EXPRESSION_SUBSTITUTION_GENERATOR_HPP
#pragma once

#include "core/syrec/parser/symbol_table.hpp"
#include "core/syrec/variable.hpp"

#include <functional>
#include <optional>

// TODO: This implementation does probably not work during function unrolling since only the symbol table entries of the current scope are considered.
// TODO: This naming scheme for generated replacements needs a rework since other optimizations could lead to the removal of previously generated replacements but since
// our naming scheme works with an ever increasing counter, the holes generated by said optimizations will never be closed again
namespace noAdditionalLineSynthesis {
    class ExpressionSubstitutionGenerator {
    public:
        using ptr = std::unique_ptr<ExpressionSubstitutionGenerator>;
        /*
         * Due to the overhead and complexity required to activate and deactivate all signal accesses that are blocked by a previous data flow analysis,
         * we instead delegate these checks to the callback provided by the user for now. This simplifies our implementation since the value lookup is equal to an invocation
         * of the callback but could maybe lead to worse performance due to the overhead required for such a call. Additionally, our internal container for the permanent restrictions
         * that would otherwise be set, is for now no longer necessary but we will keep it until a final decision is made.
         */
        using SignalValueLookupCallback = std::function<std::optional<unsigned int>(const syrec::VariableAccess&)>;

        explicit ExpressionSubstitutionGenerator(const std::optional<std::string>& optionalUserProvidedNewCandidateSignalIdentPrefix):
            symbolTable(nullptr), lastGeneratedReplacementCandidateCounter(0) {
            if (optionalUserProvidedNewCandidateSignalIdentPrefix.has_value()) {
                if (optionalUserProvidedNewCandidateSignalIdentPrefix->empty()) {
                    generatedReplacementCandidatePrefix = DEFAULT_GENERATED_REPLACEMENT_CANDIDATE_PREFIX;
                } else if (!optionalUserProvidedNewCandidateSignalIdentPrefix->rfind("__", 0))
                    generatedReplacementCandidatePrefix = optionalUserProvidedNewCandidateSignalIdentPrefix;
            }
            dimensionReplacementStatusLookup = DimensionReplacementStatusLookup();
        }

        struct ReplacementResult {
            syrec::VariableAccess::ptr                 foundReplacement;
            std::optional<syrec::AssignStatement::ptr> requiredResetOfReplacement;
            bool                                       doesGeneratedReplacementReferenceExistingSignal;
        };

        enum RestrictionUpdate {
            Activation,
            Deactivation
        };

        enum RestrictionLifetime {
            Temporary,
            Permanent
        };

        // TODO: Return type could be rework to bool to give the user a chance to handle not creatable restrictions during initialization
        void                                           updateRestrictions(const std::vector<syrec::VariableAccess::ptr>& restrictionsDefiningNotUsableReplacementCandidates, RestrictionLifetime lifeTimeOfRestrictions, RestrictionUpdate typeOfUpdate);
        void                                           loadLastNewlyGeneratedReplacementSignalInformation();
        void                                           clearAllRestrictions();
        void                                           resetInternals(bool reloadGeneratableReplacementCandidateNameFromSymbolTable = false);
        void                                           defineSymbolTable(const parser::SymbolTable::ptr& symbolTable);
        // TODO: How does a generated reset of a found replacement effect an existing data flow analysis result (should the reset function as a restriction, etc.)
        [[nodiscard]] std::optional<ReplacementResult> generateReplacementFor(unsigned int requiredBitwidthOfReplacement, const SignalValueLookupCallback& existingSignalValueLookupCallback);
        [[nodiscard]] syrec::Variable::vec             getDefinitionsOfReplacementsCreatedFromNewlyGeneratedSignals() const;


    protected:
        using AccessedValueOfDimension = std::optional<std::size_t>;
        struct DimensionReplacementStatus {
            using ptr = std::shared_ptr<DimensionReplacementStatus>;

            std::size_t declaredValuesOfDimension;
            std::size_t lastLoadedValueOfDimension;
            bool        isIntermediateDimension;

            struct LeafLayerData {
                using ptr = std::shared_ptr<LeafLayerData>;

                optimizations::BitRangeAccessRestriction::ptr permanentRestrictions;
                optimizations::BitRangeAccessRestriction::ptr temporaryRestrictions;
                
                void               clearAllTemporaryRestrictions() const;
                void               updateRestriction(const optimizations::BitRangeAccessRestriction::BitRangeAccess& restriction, RestrictionLifetime lifeTimeOfRestriction, RestrictionUpdate typeOfUpdate) const;
                [[nodiscard]] bool isAccessRestrictedToBitrange(const optimizations::BitRangeAccessRestriction::BitRangeAccess& bitRange) const;
            };

            struct LayerDataEntry {
                using ptr = std::shared_ptr<LayerDataEntry>;

                std::size_t                                                       referencedValueOfDimension;
                std::variant<DimensionReplacementStatus::ptr, LeafLayerData::ptr> data;

                [[nodiscard]] std::optional<DimensionReplacementStatus::ptr> getIntermediateLayerData() const;
                [[nodiscard]] std::optional<LeafLayerData::ptr>              getLeafLayerData() const;
            };

            std::vector<LayerDataEntry::ptr> dataPerValueOfDimension;
            std::unordered_set<std::size_t>  alreadyLoadedValuesOfDimension;

            [[nodiscard]] std::optional<DimensionReplacementStatus::ptr> getIntermediateLayerDataForValueOfDimension(std::size_t valueOfDimension) const;
            [[nodiscard]] std::optional<LeafLayerData::ptr>              getLeafLayerDataForValueOfDimension(std::size_t valueOfDimension) const;
            [[nodiscard]] bool                                           wasValueOfDimensionAlreadyLoaded(std::size_t valueOfDimension) const;
            [[nodiscard]] std::optional<LayerDataEntry::ptr>             getDataOfValueOfDimension(std::size_t valueOfDimension) const;
            void                                                         makeValueOfDimensionAvailable(const LayerDataEntry::ptr& valueOfDimensionData);
        };
        using DimensionReplacementStatusLookup = std::map<std::string, std::shared_ptr<DimensionReplacementStatus>>;
        DimensionReplacementStatusLookup dimensionReplacementStatusLookup;

        struct SignalBitwidthGroup {
            unsigned int             bitwidth;
            std::vector<std::string> signalIdents;
        };
        std::vector<SignalBitwidthGroup> orderedReplacementCandidatesBitwidthCache;

        parser::SymbolTable::ptr symbolTable;

        // TODO: Add checks that double underscore cannot be used as a signal ident in the parser
        const std::string_view     DEFAULT_GENERATED_REPLACEMENT_CANDIDATE_PREFIX = "__noAddLineSynCandidate_";
        std::optional<std::string> generatedReplacementCandidatePrefix;
        syrec::Variable::vec       generatedReplacementsLookup;
        std::optional<std::size_t> lastGeneratedReplacementCandidateCounter;

        struct TransformedSignalAccess {
            std::string                                              signalIdent;
            std::vector<unsigned int>                                accessedValuePerDimension;
            optimizations::BitRangeAccessRestriction::BitRangeAccess accessedBitRange;
        };

        void                                                                                  updateRestriction(const syrec::VariableAccess& restriction, RestrictionLifetime lifetimeOfRestriction, RestrictionUpdate typeOfUpdate);
        void                                                                                  cacheSignalBitwidth(const std::string& signalIdent, unsigned int signalBitwidth);
        void                                                                                  incrementLastNewlyGeneratedSignalCounter();
        [[nodiscard]] std::optional<std::reference_wrapper<SignalBitwidthGroup>>              getOrCreateCacheEntryForSignalBitwdith(unsigned int bitwidth);
        [[nodiscard]] std::unordered_set<std::string>                                         determineCachedSignalIdentsHavingGivenBitwidth(unsigned bitwidth) const;
        [[nodiscard]] std::optional<unsigned int>                                             getSignalBitwidth(const std::string& signalIdent) const;
        [[nodiscard]] std::optional<syrec::Variable::ptr>                                     getSignalInformationFromSymbolTable(const std::string_view& signalIdent) const;
        [[nodiscard]] std::optional<TransformedSignalAccess>                                  transformSignalAccess(const syrec::VariableAccess& signalAccess, const syrec::Variable& symbolTableEntryForReferencedSignal) const;
        
        [[maybe_unused]] std::optional<DimensionReplacementStatus::ptr>                                 getOrCreateEntryForRestriction(const syrec::Variable& symbolTableEntryForReferencedSignal);
        [[nodiscard]] std::optional<DimensionReplacementStatus::ptr>                                    getEntryForRestriction(const syrec::Variable& symbolTableEntryForReferencedSignal) const;
        [[nodiscard]] static std::optional<DimensionReplacementStatus::ptr>                             generateDefaultDimensionReplacementStatusForIntermediateLayer(const std::vector<unsigned int>& declaredValuesPerDimension, std::size_t currDimensionToProcess, unsigned int bitwidthOfAccessedSignal);
        [[nodiscard]] static std::optional<DimensionReplacementStatus::LeafLayerData::ptr>              generateDefaultDimensionReplacementStatusForValueOfDimensionInLeafLayer(unsigned int bitwidthOfAccessedSignal);
        [[maybe_unused]] static std::optional<DimensionReplacementStatus::ptr>                          advanceRestrictionLookupToLeafLayer(const DimensionReplacementStatus::ptr& topMostRestrictionLayer, const std::vector<unsigned int>& dimensionAccessDefiningPathToLeafLayer, unsigned int bitwidthOfAccessedSignal, bool generateMissingEntries = true);
        
        struct CandidateBasedOnBitwidthSearchResult {
            std::string signalIdent;
            std::size_t offsetOfCandidateGroup;
            std::size_t offsetInCandidateGroup;
        };

        [[nodiscard]] std::optional<syrec::VariableAccess::ptr>   findReplacementCandidateBasedOnBitwidth(unsigned int requiredMinimumBitwidth, const SignalValueLookupCallback& existingSignalValueLookupCallback);
        [[nodiscard]] std::vector<SignalBitwidthGroup>::iterator  getFirstGroupOfSignalsWithEqualOrLargerBitwidth(unsigned int bitwidth);
        [[nodiscard]] bool                                        advanceIteratorToNextGroup(std::vector<SignalBitwidthGroup>::iterator& iterator) const;
        [[nodiscard]] std::optional<syrec::VariableAccess::ptr>   searchForReplacementInPotentialReplacementCandidatesFromSymbolTableWithMatchingBitwidth(unsigned int bitwidthOfGroupToBeSearched, unsigned int requiredBitwidthOfReplacement, const SignalValueLookupCallback& existingSignalValueLookupCallback);
        [[nodiscard]] static std::optional<syrec::VariableAccess> generateSignalAccessForNotLoadedEntryFromSymbolTableForGivenBitwidth(const syrec::Variable::ptr& symbolTableEntry, unsigned int requiredBitwidth);

        class SignalAccessReplacementSearchData {
        public:
            SignalAccessReplacementSearchData() = delete;
            [[nodiscard]] static std::optional<SignalAccessReplacementSearchData> init(const syrec::Variable::ptr& symbolTableInformationOfReplacementCandidate, unsigned int requiredBitwidthForReplacement);
            [[nodiscard]] std::optional<syrec::VariableAccess::ptr>               findReplacement(const DimensionReplacementStatus::ptr& topMostRestrictionLayer, const SignalValueLookupCallback& existingSignalValueLookupCallback);
        protected:
            std::size_t                                              currentlyProcessedDimension;
            std::size_t                                              numPossibleBitRangeWindowAdvances;
            std::size_t                                              numMadeBitRangeWindowAdvances;
            std::vector<unsigned int>                                currentValuePerAccessedDimension;
            optimizations::BitRangeAccessRestriction::BitRangeAccess activeBitRangeAccess;
            syrec::VariableAccess::ptr                               internalContainerHoldingCurrentSignalAccess;
            
            SignalAccessReplacementSearchData(const syrec::VariableAccess::ptr& containerForAccessedSignal, unsigned int requiredBitwidthOfReplacement):
                currentlyProcessedDimension(0), numPossibleBitRangeWindowAdvances(containerForAccessedSignal->var->bitwidth - requiredBitwidthOfReplacement),
                numMadeBitRangeWindowAdvances(0), currentValuePerAccessedDimension(std::vector(containerForAccessedSignal->var->dimensions.size(), 0u)),
                activeBitRangeAccess(optimizations::BitRangeAccessRestriction::BitRangeAccess(0, requiredBitwidthOfReplacement - 1)),
                internalContainerHoldingCurrentSignalAccess(containerForAccessedSignal) {
            }

            [[nodiscard]] bool                setAccessedBitRange(unsigned int accessedBitRangeStart, unsigned int accessedBitRangeEnd);
            [[nodiscard]] std::optional<bool> shiftBitRangeWindowToTheRightAndResetOnOverflow();
            [[nodiscard]] std::optional<bool> shiftDimensionAccessOneDimensionToTheLeftOnOverflow();
            [[nodiscard]] bool                doesIncrementOfValueOfDimensionLeadToOverflow(std::size_t indexOfDimensionToCheck) const;
            [[nodiscard]] bool                setValueOfAccessedDimensionTo(std::size_t indexOfUpdatedDimension, unsigned int accessedValueOfDimension);
        };
        [[nodiscard]] std::optional<syrec::VariableAccess::ptr> createReplacementFromCandidate(const syrec::Variable::ptr& symbolTableEntryForReplacementCandidate, unsigned int requiredMinimumBitwidthOfReplacement, const SignalValueLookupCallback& existingSignalValueLookupCallback);
        [[nodiscard]] std::optional<std::size_t>                loadLastGeneratedTemporarySignalNameFromSymbolTable() const;
        [[nodiscard]] std::optional<std::string>                generateNextTemporarySignalName() const;
        [[nodiscard]] std::optional<syrec::VariableAccess::ptr> generateNewTemporarySignalAsReplacementCandidate(unsigned int requiredBitwidth);
        [[nodiscard]] std::optional<std::size_t>                determinePostfixOfNewlyGeneratedReplacementSignalIdent(const std::string& signalIdent) const;
        [[nodiscard]] static std::optional<std::size_t>         determineNextTemporarySignalPostfix(const std::optional<std::size_t>& lastGeneratedTemporarySignalPostfix);
        [[nodiscard]] static std::optional<std::size_t>         convertStringToNumericValue(const std::string& stringToConvert);
    };
} // namespace noAdditionalLineSynthesis
#endif
/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


namespace syrec {


void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Number(std::optional<Number::ptr> &parsed_number, bool simplify_if_possible ) {
		if (la->kind == _int) {
			Get();
			const std::optional<unsigned int> conversion_result = convert_token_value_to_number(*t);
			if (conversion_result.has_value()) {
			const Number::ptr result = std::make_shared<syrec::Number>(syrec::Number(conversion_result.value())); 
			parsed_number.emplace(result);
			}
			
		} else if (la->kind == 3 /* "#" */) {
			Get();
			Expect(_ident);
			const std::string signal_ident = convert_to_uniform_text_format(t->val);
			if (check_ident_was_declared(signal_ident)) {
			const auto &symbol_table_entry = current_symbol_table_scope->get_variable(signal_ident);
			if (symbol_table_entry.has_value() && std::holds_alternative<Variable::ptr>(symbol_table_entry.value())) {
			parsed_number.emplace(std::make_shared<syrec::Number>(syrec::Number(std::get<Variable::ptr>(symbol_table_entry.value())->bitwidth)));
			}
			else {
			// TODO: GEN_ERROR, this should not happen but check anyways
			}
			}
			
		} else if (la->kind == 4 /* "$" */) {
			Get();
			Expect(_ident);
			const std::string signal_ident = convert_to_uniform_text_format(t->val);
			if (check_ident_was_declared(signal_ident)) {
			const auto &symbol_table_entry = current_symbol_table_scope->get_variable(signal_ident);
			if (symbol_table_entry.has_value() && std::holds_alternative<Number::ptr>(symbol_table_entry.value())) {
			parsed_number.emplace(std::get<Number::ptr>(symbol_table_entry.value()));
			}
			else {
			// TODO: GEN_ERROR, this should not happen but check anyways
			}
			}
			
		} else if (la->kind == 5 /* "(" */) {
			std::optional<Number::ptr> lhs_operand, rhs_operand;  
			std::optional<syrec_operation::operation> op;
			
			Get();
			Number(lhs_operand, simplify_if_possible);
			if (la->kind == 6 /* "+" */) {
				Get();
				op.emplace(syrec_operation::operation::addition);		
			} else if (la->kind == 7 /* "-" */) {
				Get();
				op.emplace(syrec_operation::operation::subtraction);	
			} else if (la->kind == 8 /* "*" */) {
				Get();
				op.emplace(syrec_operation::operation::multiplication);	
			} else if (la->kind == 9 /* "/" */) {
				Get();
				op.emplace(syrec_operation::operation::division);		
			} else SynErr(56);
			Number(rhs_operand, simplify_if_possible);
			if (op.has_value() && lhs_operand.has_value() && rhs_operand.has_value()){
			const std::optional<unsigned int> lhs_value = evaluate_number_container_to_constant(lhs_operand.value());
			const std::optional<unsigned int> rhs_value = evaluate_number_container_to_constant(rhs_operand.value());
			
			if (lhs_value.has_value() && rhs_value.has_value()) {
			const std::optional<unsigned int> op_result = apply_binary_operation(op.value(),
			lhs_operand.value()->evaluate(loop_variable_mapping_lookup),
			rhs_operand.value()->evaluate(loop_variable_mapping_lookup));
			if (op_result.has_value()) {
			const Number::ptr result = std::make_shared<syrec::Number>(syrec::Number(op_result.value())); 
			parsed_number.emplace(result);
			}
			}
			}
			
			Expect(10 /* ")" */);
		} else SynErr(57);
}

void Parser::SyReC() {
		std::optional<Module::ptr> module;	
		Module(module);
		if (module.has_value()) {
		current_symbol_table_scope->add_entry(module.value());
		this->modules.emplace_back(module.value());
		}
		
		while (la->kind == 11 /* "module" */) {
			module.reset();	
			Module(module);
			if (module.has_value()) {
			const Module::ptr well_formed_module = module.value();
			if (current_symbol_table_scope->contains(well_formed_module)) {
			// TODO: GEN_ERROR 
			// TODO: Do not cancel parsing	
			}
			else {
			current_symbol_table_scope->add_entry(well_formed_module);
			this->modules.emplace_back(module.value());
			}
			}
			
		}
}

void Parser::Module(std::optional<Module::ptr> &parsed_module	) {
		symbol_table::open_scope(current_symbol_table_scope);
		std::optional<std::vector<Variable::ptr>> locals;	
		bool valid_module_definition = false;
		Statement::vec module_body {};
		
		Expect(11 /* "module" */);
		Expect(_ident);
		const std::string module_name = convert_to_uniform_text_format(t->val);	
		Module::ptr user_defined_module = std::make_shared<syrec::Module>(syrec::Module(module_name));
		
		Expect(5 /* "(" */);
		if (la->kind == 13 /* "in" */ || la->kind == 14 /* "out" */ || la->kind == 15 /* "inout" */) {
			ParameterList(valid_module_definition, user_defined_module);
		}
		Expect(10 /* ")" */);
		while (la->kind == 16 /* "wire" */ || la->kind == 17 /* "signal" */) {
			SignalList(locals);
			valid_module_definition &= locals.has_value();	
		}
		StatementList(module_body);
		symbol_table::close_scope(current_symbol_table_scope);
		if (module_body.empty()) {
		valid_module_definition = false;
		// TODO: GEN_ERROR
		}
		
		if (valid_module_definition) {
		user_defined_module->variables = locals.value_or(std::vector<Variable::ptr>{});
		for (const auto &statement : module_body) {
		user_defined_module->addStatement(statement);
		}
		parsed_module.emplace(user_defined_module);
		}
		
}

void Parser::ParameterList(bool &is_valid_module_definition, const Module::ptr &module) {
		std::optional<Variable::ptr> parameter;	
		Parameter(parameter);
		is_valid_module_definition = parameter.has_value();
		if (is_valid_module_definition) {
		module->addParameter(parameter.value());
		current_symbol_table_scope->add_entry(parameter.value());
		}
		
		while (la->kind == 12 /* "," */) {
			parameter.reset();	
			Get();
			Parameter(parameter);
			is_valid_module_definition = parameter.has_value();
			if (is_valid_module_definition) {	
			const Variable::ptr &well_formed_parameter = parameter.value();
			if (!current_symbol_table_scope->contains(well_formed_parameter->name)) {
			module->addParameter(well_formed_parameter);
			current_symbol_table_scope->add_entry(well_formed_parameter);
			}
			else {
			is_valid_module_definition = false;
			// TODO: GEN_ERROR 
			}
			}
			
		}
}

void Parser::SignalList(std::optional<std::vector<Variable::ptr>> &signals ) {
		Variable::Types signal_type = Variable::In;
		std::optional<Variable::ptr> declared_signal;
		bool valid_signal_type = true;
		std::vector<Variable::ptr> valid_signal_declarations;
		
		if (la->kind == 16 /* "wire" */) {
			Get();
			signal_type = Variable::Wire;		
		} else if (la->kind == 17 /* "signal" */) {
			Get();
			signal_type = Variable::State;		
		} else SynErr(58);
		if (Variable::Wire != signal_type && Variable::State != signal_type) {
		// TODO: GEN_ERROR ?
		// TODO: Do not cancel parsing
		valid_signal_type = false;
		}
		
		SignalDeclaration(signal_type, declared_signal);
		if (valid_signal_type && declared_signal.has_value()) {
		const Variable::ptr &valid_signal_declaration = declared_signal.value();
		if (current_symbol_table_scope->contains(valid_signal_declaration->name)) {
		// TODO: GEN_ERROR 
		// TODO: Do not cancel parsing
		}
		else {
		valid_signal_declarations.emplace_back(valid_signal_declaration);
		current_symbol_table_scope->add_entry(valid_signal_declaration);
		}
		}
		
		while (la->kind == 12 /* "," */) {
			declared_signal.reset();			
			Get();
			SignalDeclaration(signal_type, declared_signal);
			if (valid_signal_type && declared_signal.has_value()) {
			const Variable::ptr &valid_signal_declaration = declared_signal.value();
			if (current_symbol_table_scope->contains(valid_signal_declaration->name)) {
			// TODO: GEN_ERROR 
			// TODO: Do not cancel parsing
			}
			else {
			valid_signal_declarations.emplace_back(valid_signal_declaration);
			current_symbol_table_scope->add_entry(valid_signal_declaration);
			}
			}
			
		}
		if (valid_signal_declarations.size()){
		signals.emplace(valid_signal_declarations);
		}
		
}

void Parser::StatementList(Statement::vec &statements ) {
		std::optional<Statement::ptr> user_defined_statement;	
		Statement(user_defined_statement);
		if (user_defined_statement.has_value()) {
		statements.emplace_back(user_defined_statement.value());
		}
		
		while (la->kind == 20 /* ";" */) {
			user_defined_statement.reset();	
			Get();
			Statement(user_defined_statement);
			if (user_defined_statement.has_value()) {
			statements.emplace_back(user_defined_statement.value());
			}
			
		}
}

void Parser::Parameter(std::optional<Variable::ptr> &parameter ) {
		Variable::Types parameter_type = Variable::Wire;
		bool valid_variable_type = true;
		
		if (la->kind == 13 /* "in" */) {
			Get();
			parameter_type = Variable::In;	
		} else if (la->kind == 14 /* "out" */) {
			Get();
			parameter_type = Variable::Out;	
		} else if (la->kind == 15 /* "inout" */) {
			Get();
			parameter_type = Variable::Inout;	
		} else SynErr(59);
		if (Variable::Wire == parameter_type) {
		// TODO: GEN_ERROR 
		// TODO: Do not cancel parsing
		valid_variable_type = false;
		}
		
		SignalDeclaration(parameter_type, parameter);
		if (!valid_variable_type) {
		parameter.reset();
		}
		
}

void Parser::SignalDeclaration(Variable::Types variable_type, std::optional<Variable::ptr> &declared_signal ) {
		std::vector<unsigned int> dimensions{};
		// TODO: Use default bit width
		unsigned int signal_width = 0;	
		bool valid_declaration = true;
		
		Expect(_ident);
		const std::string signal_ident = convert_to_uniform_text_format(t->val);	
		while (la->kind == 18 /* "[" */) {
			Get();
			Expect(_int);
			const std::optional<unsigned int> dimension = convert_token_value_to_number(*t);
			if (!dimension.has_value()) {
			valid_declaration = false;
			// TODO: GEN_ERROR
			}
			else {
			dimensions.emplace_back(dimension.value());	
			}
			
			Expect(19 /* "]" */);
		}
		if (la->kind == 5 /* "(" */) {
			Get();
			Expect(_int);
			const std::optional<unsigned int> user_defined_signal_width = convert_token_value_to_number(*t);
			if (!user_defined_signal_width.has_value()) {
			// TODO: GEN_ERROR
			valid_declaration = false;
			}
			else {
			signal_width = user_defined_signal_width.value();
			}
			
			Expect(10 /* ")" */);
		}
		if (valid_declaration) {
		declared_signal.emplace(std::make_shared<Variable>(Variable(variable_type, signal_ident, dimensions, signal_width)));
		}
		
}

void Parser::Statement(std::optional<Statement::ptr> &user_defined_statement ) {
		if (la->kind == 21 /* "call" */ || la->kind == 22 /* "uncall" */) {
			CallStatement(user_defined_statement);
		} else if (la->kind == 23 /* "for" */) {
			ForStatement(user_defined_statement);
		} else if (la->kind == 29 /* "if" */) {
			IfStatement(user_defined_statement);
		} else if (la->kind == 33 /* "~" */ || la->kind == 34 /* "++" */ || la->kind == 35 /* "--" */) {
			UnaryStatement(user_defined_statement);
		} else if (la->kind == 38 /* "skip" */) {
			SkipStatement(user_defined_statement);
		} else if (check_if_is_assign_statement()) {
			AssignStatement(user_defined_statement);
		} else if (la->kind == _ident) {
			SwapStatement(user_defined_statement);
		} else SynErr(60);
}

void Parser::CallStatement(std::optional<Statement::ptr> &statement ) {
		std::optional<bool> is_call_statement;
		std::vector<std::string> callee_arguments {};
		bool valid_call_operation = true;
		std::vector<std::string_view> formal_method_parameters {};
		std::size_t num_actual_parameters = 0;
		
		if (la->kind == 21 /* "call" */) {
			Get();
			is_call_statement.emplace(true);	
		} else if (la->kind == 22 /* "uncall" */) {
			Get();
			is_call_statement.emplace(false);	
		} else SynErr(61);
		valid_call_operation = is_call_statement.has_value();	
		Expect(_ident);
		const std::string method_ident = convert_to_uniform_text_format(t->val);
		method_call_guess::ptr guess_for_method = std::make_shared<method_call_guess>(method_call_guess(current_symbol_table_scope, method_ident));
		if (!guess_for_method->matches_some_options()) {
		// TODO: GEN_ERROR method not found
		valid_call_operation = false;
		}
		
		Expect(5 /* "(" */);
		Expect(_ident);
		std::string variable_ident = convert_to_uniform_text_format(t->val);
		if (check_ident_was_declared(variable_ident)) {
		try {
		guess_for_method->refine(variable_ident);
		valid_call_operation &= guess_for_method->matches_some_options();
		if (valid_call_operation) {
		callee_arguments.emplace_back(variable_ident);
		}
		}
		catch (std::invalid_argument &ex) {
		// TODO: GEN_ERROR
		valid_call_operation = false;
		}
		}
		else {
		// TODO: GEN_ERROR
		}
		num_actual_parameters++;
		
		while (la->kind == 12 /* "," */) {
			Get();
			Expect(_ident);
			variable_ident = convert_to_uniform_text_format(t->val);
			if (check_ident_was_declared(variable_ident)) {
			try {
			guess_for_method->refine(variable_ident);
			valid_call_operation &= guess_for_method->matches_some_options();
			if (valid_call_operation) {
			const Variable::ptr actual_parameter_symbol_entry = std::get<Variable::ptr>(current_symbol_table_scope->get_variable(variable_ident).value());
			callee_arguments.emplace_back(variable_ident);
			}
			}
			catch (std::invalid_argument &ex) {
			// TODO: GEN_ERROR
			valid_call_operation = false;
			}
			}
			else {
			// TODO: GEN_ERROR
			}
			num_actual_parameters++;
			
		}
		Expect(10 /* ")" */);
		if (!valid_call_operation) {
		return;		
		}
		if (!guess_for_method->matches_some_options()) {
		// TODO: GEN_ERROR
		return;
		}
		
		const std::optional<Module::ptr> possible_match_for_guess = guess_for_method->get_remaining_guess();
		if (!possible_match_for_guess.has_value()) {
		// TODO: GEN_ERROR
		return;
		}
		else {
		const Module::ptr &matching_module = possible_match_for_guess.value();
		
		if (is_call_statement.value()) {
		statement.emplace(std::make_shared<syrec::CallStatement>(syrec::CallStatement(matching_module, callee_arguments)));
		}
		else {
		statement.emplace(std::make_shared<syrec::UncallStatement>(syrec::UncallStatement(matching_module, callee_arguments)));
		}
		}
		
}

void Parser::ForStatement(std::optional<Statement::ptr> &statement ) {
		std::optional<std::string> loop_variable_ident;
		std::optional<Number::ptr> iteration_range_start;
		std::optional<Number::ptr> iteration_range_end;
		std::optional<Number::ptr> custom_step_size;
		bool negative_step_size = false;
		Statement::vec loop_body{};
		bool explicit_range_start_defined = false;
		bool explicit_step_size_defined = false;
		
		Expect(23 /* "for" */);
		if (check_if_loop_iteration_range_start_is_defined()) {
			if (check_if_loop_variable_is_defined()) {
				Expect(4 /* "$" */);
				Expect(_ident);
				const std::string &loop_var_ident = convert_to_uniform_text_format(t->val);
				if (!check_ident_was_declared(loop_var_ident)) {
				loop_variable_ident.emplace(convert_to_uniform_text_format(t->val));
				symbol_table::open_scope(current_symbol_table_scope);
				const Number::ptr loop_variable_entry = std::make_shared<syrec::Number>(syrec::Number(loop_var_ident));
				current_symbol_table_scope->add_entry(loop_variable_entry);
				}
				
				Expect(24 /* "=" */);
			}
			Number(iteration_range_start, false);
			explicit_range_start_defined = true;	
			Expect(25 /* "to" */);
		}
		Number(iteration_range_end, false);
		if (!explicit_range_start_defined){
		iteration_range_start = iteration_range_end;
		}
		
		if (la->kind == 26 /* "step" */) {
			Get();
			explicit_step_size_defined = true;	
			if (la->kind == 7 /* "-" */) {
				Get();
				negative_step_size = true;	
			}
			Number(custom_step_size, false);
			if (custom_step_size.has_value() && !custom_step_size.value()->evaluate({})) {
			// TODO: GEN_ERROR step size cannot be zero ?
			}
			
		}
		if (!explicit_step_size_defined) {
		custom_step_size.emplace(std::make_shared<syrec::Number>(syrec::Number(1)));
		}
		
		bool valid_loop_header = loop_variable_ident.has_value() 
						&& (explicit_range_start_defined ? iteration_range_start.has_value() : true)
						&& iteration_range_end.has_value()
						&& (explicit_step_size_defined ? custom_step_size.has_value() : true);
		if (valid_loop_header) {
		const unsigned int iteration_range_start_value = iteration_range_start.value()->evaluate({});
		const unsigned int iteration_range_end_value = iteration_range_end.value()->evaluate({});
		const unsigned int step_size = custom_step_size.value()->evaluate({});
		
		unsigned int num_iterations;
		if ((negative_step_size && iteration_range_end_value > iteration_range_start_value)
		|| (!negative_step_size && iteration_range_start_value > iteration_range_end_value)
		|| !step_size) {
		// TODO: Either generate error or warning
		num_iterations = 0;	
		valid_loop_header = false;
		}
		else {
		num_iterations = negative_step_size 
		? (iteration_range_start_value - iteration_range_end_value)
		: (iteration_range_end_value - iteration_range_start_value);
		num_iterations = (num_iterations + 1) / step_size;
		}
		}
		
		Expect(27 /* "do" */);
		StatementList(loop_body);
		if (loop_body.empty()) {
		// TODO: GEN_ERROR
		}
		
		Expect(28 /* "rof" */);
		if (loop_variable_ident.has_value()) {
		symbol_table::close_scope(current_symbol_table_scope);
		}
		
		// TODO: If a statement must be generated, one could create a skip statement instead of simply returning 
		if (!valid_loop_header || loop_body.empty()) {
		return;
		}
		
		const std::shared_ptr<syrec::ForStatement> loop_statement = std::make_shared<syrec::ForStatement>(syrec::ForStatement());
		loop_statement->loopVariable = loop_variable_ident.value();
		loop_statement->range = std::pair(iteration_range_start.value(), iteration_range_end.value());
		loop_statement->step = custom_step_size.value();
		loop_statement->statements = loop_body;
		statement.emplace(loop_statement);
		
}

void Parser::IfStatement(std::optional<Statement::ptr> &statement ) {
		expression_evaluation_result condition;
		expression_evaluation_result closing_condition;
		Statement::vec true_branch{};
		Statement::vec false_branch{};
		
		Expect(29 /* "if" */);
		Expression(condition, 1u, false);
		Expect(30 /* "then" */);
		StatementList(true_branch);
		Expect(31 /* "else" */);
		StatementList(false_branch);
		Expect(32 /* "fi" */);
		Expression(closing_condition, 1u, false);
		const bool conditional_well_formed = condition.has_value() 
		&& closing_condition.has_value()
		&& !true_branch.empty()
		&& !false_branch.empty();
		if (!conditional_well_formed) {
		return;
		}
		
		const std::shared_ptr<syrec::IfStatement> &conditional = std::make_shared<syrec::IfStatement>(syrec::IfStatement());
		conditional->condition = condition.value().convert_to_expression(1u);
		conditional->fiCondition = closing_condition.value().convert_to_expression(1u);
		conditional->thenStatements                    = true_branch;
		conditional->elseStatements                    = false_branch;
		statement.emplace(conditional);
		
}

void Parser::UnaryStatement(std::optional<Statement::ptr> &statement ) {
		signal_evaluation_result unary_stmt_operand;
		std::optional<syrec_operation::operation> unary_operation;	
		
		if (la->kind == 33 /* "~" */) {
			Get();
			unary_operation.emplace(syrec_operation::operation::negate_assign);	
		} else if (la->kind == 34 /* "++" */) {
			Get();
			unary_operation.emplace(syrec_operation::operation::increment_assign);	
		} else if (la->kind == 35 /* "--" */) {
			Get();
			unary_operation.emplace(syrec_operation::operation::decrement_assign);	
		} else SynErr(62);
		Expect(24 /* "=" */);
		Signal(unary_stmt_operand, false);
		if (!unary_operation.has_value() || !unary_stmt_operand.has_value() || nullptr == std::get<VariableAccess::ptr>(unary_stmt_operand.value())) {
		return;
		}
		
		const VariableAccess::ptr unary_operand_variable = std::get<VariableAccess::ptr>(unary_stmt_operand.value());
		const std::optional<unsigned int> mapped_operation = map_operation_to_unary_operation(unary_operation.value());
		if (mapped_operation.has_value()) {
		statement.emplace(std::make_shared<syrec::UnaryStatement>(syrec::UnaryStatement(mapped_operation.value(), unary_operand_variable)));
		}
		
}

void Parser::SkipStatement(std::optional<Statement::ptr> &statement ) {
		Expect(38 /* "skip" */);
		statement.emplace(std::make_shared<syrec::SkipStatement>(syrec::SkipStatement()));	
}

void Parser::AssignStatement(std::optional<Statement::ptr> &statement ) {
		signal_evaluation_result assign_stmt_lhs;
		expression_evaluation_result assign_stmt_rhs;
		std::optional<syrec_operation::operation> assign_operation;
		unsigned int expression_bitwidth = 1u;
		
		std::optional<VariableAccess::ptr> assigned_to_obj;
		
		Signal(assign_stmt_lhs, false);
		if (assign_stmt_lhs.has_value() && std::holds_alternative<VariableAccess::ptr>(assign_stmt_lhs.value())) {
		assigned_to_obj.emplace(std::get<VariableAccess::ptr>(assign_stmt_lhs.value()));
		expression_bitwidth = assigned_to_obj.value()->bitwidth();
		}
		
		if (la->kind == 36 /* "^" */) {
			Get();
			assign_operation.emplace(syrec_operation::operation::xor_assign);	
		} else if (la->kind == 6 /* "+" */) {
			Get();
			assign_operation.emplace(syrec_operation::operation::add_assign);	
		} else if (la->kind == 7 /* "-" */) {
			Get();
			assign_operation.emplace(syrec_operation::operation::minus_assign);	
		} else SynErr(63);
		Expect(24 /* "=" */);
		Expression(assign_stmt_rhs, expression_bitwidth, false);
		if (!assigned_to_obj.has_value() || !assign_operation.has_value() || !assign_stmt_rhs.has_value()) {
		return;
		}
		// TODO: To not break reversability of operation, check that expression does not contain the assigned to signal 
		const std::optional<unsigned int> mapped_operation = map_operation_to_assign_operation(assign_operation.value());
		if (mapped_operation.has_value()) {
		statement.emplace(std::make_shared<syrec::AssignStatement>(syrec::AssignStatement(assigned_to_obj.value(),
		mapped_operation.value(),
		assign_stmt_rhs.value().convert_to_expression(expression_bitwidth))));
		}
		
}

void Parser::SwapStatement(std::optional<Statement::ptr> &statement ) {
		signal_evaluation_result swap_me, swap_other;
		bool swap_operator_specified = false;
		
		Signal(swap_me, false);
		Expect(37 /* "<=>" */);
		swap_operator_specified = true;	
		Signal(swap_other, false);
		const bool lhs_operand_valid = swap_me.has_value() && std::holds_alternative<VariableAccess::ptr>(swap_me.value());
		const bool rhs_operand_valid = swap_other.has_value() && std::holds_alternative<VariableAccess::ptr>(swap_other.value());
		
		if (swap_operator_specified && lhs_operand_valid && rhs_operand_valid) {
		const VariableAccess::ptr &lhs = std::get<VariableAccess::ptr>(swap_me.value());
		const VariableAccess::ptr &rhs = std::get<VariableAccess::ptr>(swap_other.value());
		statement.emplace(std::make_shared<syrec::SwapStatement>(syrec::SwapStatement(lhs, rhs)));
		}			
		
}

void Parser::Expression(expression_evaluation_result &user_defined_expression, unsigned int bitwidth, bool simplify_if_possible) {
		signal_evaluation_result signal;
		std::optional<Number::ptr> number;
		
		if (StartOf(1)) {
			if (check_if_expression_is_number()) {
				Number(number, simplify_if_possible);
				if (number.has_value()) {
				user_defined_expression.emplace(std::make_shared<NumericExpression>(NumericExpression(number.value(), bitwidth)));
				}
				
			} else if (check_if_expression_is_binary_expression()) {
				BinaryExpression(user_defined_expression, bitwidth, simplify_if_possible);
			} else {
				ShiftExpression(user_defined_expression, bitwidth, simplify_if_possible);
			}
		} else if (la->kind == _ident) {
			Signal(signal, simplify_if_possible);
			if (signal.has_value()) {
			if (std::holds_alternative<VariableAccess::ptr>(signal.value())) {
			const VariableAccess::ptr &var_access = std::get<VariableAccess::ptr>(signal.value());
			user_defined_expression.emplace(std::make_shared<VariableExpression>(VariableExpression(var_access)));
			}
			else if (std::holds_alternative<Number::ptr>(signal.value())){
			const Number::ptr &number_signal = std::get<Number::ptr>(signal.value());
			user_defined_expression.emplace(std::make_shared<NumericExpression>(NumericExpression(number_signal, bitwidth)));
			}
			}
			
		} else if (la->kind == 33 /* "~" */ || la->kind == 52 /* "!" */) {
			UnaryExpression(user_defined_expression, bitwidth, simplify_if_possible);
		} else SynErr(64);
}

void Parser::Signal(signal_evaluation_result &signalAccess, bool simplifyIfPossible) {
		std::optional<VariableAccess::ptr> accessedSignal;
		const unsigned int defaultIndexExpressionBitwidth = 1u;
		unsigned int indexExpressionBitwidth = defaultIndexExpressionBitwidth;
		
		// TODO: Using global zero_based indexing flag to initialize default value
		std::size_t accessedDimensionIdx = 0;
		
		Expect(_ident);
		const std::string signalIdent = convert_to_uniform_text_format(t->val);
		if (check_ident_was_declared(signalIdent)) {
		const auto symbolTableEntryForSignal = current_symbol_table_scope->get_variable(signalIdent);
		if (symbolTableEntryForSignal.has_value() && std::holds_alternative<Variable::ptr>(symbolTableEntryForSignal.value())) {
		const VariableAccess::ptr container = std::make_shared<VariableAccess>(VariableAccess());
		container->setVar(std::get<Variable::ptr>(symbolTableEntryForSignal.value()));
		accessedSignal.emplace(container);
		indexExpressionBitwidth = accessedSignal.value()->bitwidth();
		}
		}
		bool isValidSignalAccess = accessedSignal.has_value();
		bool indexExpressionsSemanticallyOk = isValidSignalAccess;
		
		while (la->kind == 18 /* "[" */) {
			Get();
			expression_evaluation_result dimensionExpression; 
			Expression(dimensionExpression, indexExpressionBitwidth, simplifyIfPossible);
			indexExpressionsSemanticallyOk &= dimensionExpression.has_value();
			
			if (indexExpressionsSemanticallyOk) {
			const std::optional<unsigned int> &constantValueForAccessedDimension = get_value_if_expression_is_constant(dimensionExpression);
			if (constantValueForAccessedDimension.has_value()) {
			// TODO: Using global flag indicating zero_based indexing or not
			indexExpressionsSemanticallyOk = range_check::isValidDimensionAccess(accessedSignal.value()->getVar(), constantValueForAccessedDimension.value(), true);
			
			if (!indexExpressionsSemanticallyOk) {
			// TODO: Using global flag indicating zero_based indexing or not
			const range_check::IndexAccessRangeConstraint constraintForCurrentDimension = range_check::getConstraintsForValidDimensionAccess(accessedSignal.value()->getVar(), accessedDimensionIdx, true).value();
			// TODO: GEN_ERROR
			}
			}
			
			if (indexExpressionsSemanticallyOk) {
			accessedSignal.value()->indexes.emplace_back(dimensionExpression.value().convert_to_expression(indexExpressionBitwidth));
			}
			}
			accessedDimensionIdx++;
			
			Expect(19 /* "]" */);
		}
		isValidSignalAccess = indexExpressionsSemanticallyOk;	
		if (la->kind == 39 /* "." */) {
			std::optional<Number::ptr> bitRangeStart;
			std::optional<Number::ptr> bitRangeEnd;
			bool rangeExplicitlyDefined = false;
			
			Get();
			Number(bitRangeStart, false);
			if (la->kind == 40 /* ":" */) {
				Get();
				Number(bitRangeEnd, false);
				rangeExplicitlyDefined = true;	
			}
			isValidSignalAccess &= bitRangeStart.has_value() && (rangeExplicitlyDefined ? bitRangeEnd.has_value() : true);
			if (isValidSignalAccess) {
			const std::pair<Number::ptr, Number::ptr> bitRange(bitRangeStart.value(), rangeExplicitlyDefined ? bitRangeEnd.value() : bitRangeStart.value());
			const std::pair<std::size_t, std::size_t> bitRangeEvaluated(bitRange.first->evaluate({}), bitRange.second->evaluate({}));
			
			const Variable::ptr &accessedVariable = accessedSignal.value()->getVar();
			if (rangeExplicitlyDefined) {
			// TODO: Using global zero_based indexing flag
			if (!range_check::isValidBitRangeAccess(accessedVariable, bitRangeEvaluated, true)){
			isValidSignalAccess = false;
			// TODO: GEN_ERROR
			}
			}
			else {
			// TODO: Using global zero_based indexing flag	
			if (!range_check::isValidBitAccess(accessedVariable, bitRangeEvaluated.first, true)){
			isValidSignalAccess = false;
			// TODO: GEN_ERROR
			}
			}
			
			if (isValidSignalAccess) {
			accessedSignal.value()->range.emplace(bitRange);
			}
			}
			
		}
		if (isValidSignalAccess) {
		signalAccess.emplace(accessedSignal.value());
		}
		
}

void Parser::BinaryExpression(expression_evaluation_result &user_defined_binary_expression, unsigned int bitwidth, bool simplify_if_possible) {
		expression_evaluation_result binary_expr_lhs;
		expression_evaluation_result binary_expr_rhs;
		std::optional<syrec_operation::operation> binary_operation;
		unsigned int operands_bitwidth = 0u;
		
		Expect(5 /* "(" */);
		Expression(binary_expr_lhs, bitwidth, simplify_if_possible);
		if (binary_expr_lhs.has_value()) {
		operands_bitwidth = std::max(binary_expr_lhs->convert_to_expression(bitwidth)->bitwidth(), bitwidth);
		}
		
		switch (la->kind) {
		case 6 /* "+" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::addition);	
			break;
		}
		case 7 /* "-" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::subtraction);	
			break;
		}
		case 36 /* "^" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::bitwise_xor);	
			break;
		}
		case 8 /* "*" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::multiplication);	
			break;
		}
		case 9 /* "/" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::division);	
			break;
		}
		case 41 /* "%" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::modulo);	
			break;
		}
		case 42 /* "*>" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::upper_bits_multiplication);	
			break;
		}
		case 43 /* "&&" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::logical_and);	
			break;
		}
		case 44 /* "||" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::logical_or);	
			break;
		}
		case 45 /* "&" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::bitwise_and);	
			break;
		}
		case 46 /* "|" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::bitwise_or);	
			break;
		}
		case 47 /* "<" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::less_than);	
			break;
		}
		case 48 /* ">" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::greater_than);	
			break;
		}
		case 24 /* "=" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::equals);	
			break;
		}
		case 49 /* "!=" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::not_equals);	
			break;
		}
		case 50 /* "<=" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::less_equals);	
			break;
		}
		case 51 /* ">=" */: {
			Get();
			binary_operation.emplace(syrec_operation::operation::greater_equals);	
			break;
		}
		default: SynErr(65); break;
		}
		Expression(binary_expr_rhs, operands_bitwidth, simplify_if_possible);
		Expect(10 /* ")" */);
		if (binary_expr_lhs.has_value() && binary_operation.has_value() && binary_expr_rhs.has_value()) {
		const std::optional<unsigned int> mapped_operation = map_operation_to_binary_operation(binary_operation.value());
		if (mapped_operation.has_value()) {
			if (binary_expr_lhs->is_constant() && binary_expr_rhs->is_constant()) {
				const unsigned int binary_expr_lhs_value = binary_expr_lhs->get_constant_value();
				const unsigned int binary_expr_rhs_value = binary_expr_rhs->get_constant_value();
				const std::optional<unsigned int> evaluation_result = apply_binary_operation(binary_operation.value(),
																binary_expr_lhs_value, binary_expr_rhs_value);
				if (evaluation_result.has_value()) {
					user_defined_binary_expression.emplace(evaluation_result.value());
				}
			}
			else {
				const expression::ptr lhs_operand = binary_expr_lhs->convert_to_expression(operands_bitwidth);
				const expression::ptr rhs_operand = binary_expr_rhs->convert_to_expression(operands_bitwidth);
				user_defined_binary_expression.emplace(std::make_shared<syrec::BinaryExpression>(syrec::BinaryExpression(lhs_operand,
									mapped_operation.value(),
									rhs_operand)));
			}
		}
		}
		
}

void Parser::ShiftExpression(expression_evaluation_result &user_defined_shift_expression, unsigned int bitwidth, bool simplify_if_possible) {
		expression_evaluation_result shift_expression_lhs;
		std::optional<Number::ptr> shift_amount;
		std::optional<syrec_operation::operation> shift_operation;
		
		Expect(5 /* "(" */);
		Expression(shift_expression_lhs, bitwidth, simplify_if_possible);
		if (la->kind == 53 /* "<<" */) {
			Get();
			shift_operation.emplace(syrec_operation::operation::shift_left);	
		} else if (la->kind == 54 /* ">>" */) {
			Get();
			shift_operation.emplace(syrec_operation::operation::shift_right);	
		} else SynErr(66);
		Number(shift_amount, simplify_if_possible);
		if (shift_expression_lhs.has_value() && shift_operation.has_value() && shift_amount.has_value()) {
		const std::optional<unsigned int> mapped_shift_operation = map_operation_to_shift_operation(shift_operation.value());
		const expression::ptr lhs_operand_expression = shift_expression_lhs.value().convert_to_expression(bitwidth);
		
		// One could replace the shift statement with a skip statement if the shift amount is zero 
		const std::optional<unsigned int> shift_amount_value_evaluated = evaluate_number_container_to_constant(shift_amount.value());
		if (shift_amount_value_evaluated.has_value() && shift_expression_lhs.value().is_constant()) {
		const unsigned int shift_operand_lhs_value = shift_expression_lhs.value().get_constant_value();
		const std::optional<unsigned int> shift_application_result = syrec_operation::apply(shift_operation.value(), 
		shift_operand_lhs_value,
		shift_amount_value_evaluated.value());
		
		if (shift_application_result.has_value()) {
		user_defined_shift_expression.emplace(expression_or_constant(shift_application_result.value()));
		}
		else {
		// TODO: GEN_ERROR
		return;
		}
		}
		else {
		const expression::ptr lhs_operand_expression = shift_expression_lhs.value().convert_to_expression(bitwidth);
		user_defined_shift_expression.emplace(std::make_shared<syrec::ShiftExpression>(lhs_operand_expression,
		mapped_shift_operation.value(),
		shift_amount.value()));
		}
		}
		
		Expect(10 /* ")" */);
}

void Parser::UnaryExpression(expression_evaluation_result &unary_expression, unsigned int bitwidth, bool simplify_if_possible) {
		expression_evaluation_result unary_expression_operand;
		std::optional<syrec_operation::operation> unary_operation;
		
		if (la->kind == 52 /* "!" */) {
			Get();
			unary_operation.emplace(syrec_operation::operation::logical_negation);	
		} else if (la->kind == 33 /* "~" */) {
			Get();
			unary_operation.emplace(syrec_operation::operation::bitwise_negation);	
		} else SynErr(67);
		Expression(unary_expression_operand, bitwidth, simplify_if_possible);
		if (unary_operation.has_value() && unary_expression_operand.has_value()){
		// TODO:
		}
		
		// TODO: Notify user (i.e. via error) that reference parser currently does not support unary statements - we will ignore them for now
		
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	SyReC();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 55;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[2][57] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,T,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"ident expected"); break;
			case 2: s = coco_string_create(L"int expected"); break;
			case 3: s = coco_string_create(L"\"#\" expected"); break;
			case 4: s = coco_string_create(L"\"$\" expected"); break;
			case 5: s = coco_string_create(L"\"(\" expected"); break;
			case 6: s = coco_string_create(L"\"+\" expected"); break;
			case 7: s = coco_string_create(L"\"-\" expected"); break;
			case 8: s = coco_string_create(L"\"*\" expected"); break;
			case 9: s = coco_string_create(L"\"/\" expected"); break;
			case 10: s = coco_string_create(L"\")\" expected"); break;
			case 11: s = coco_string_create(L"\"module\" expected"); break;
			case 12: s = coco_string_create(L"\",\" expected"); break;
			case 13: s = coco_string_create(L"\"in\" expected"); break;
			case 14: s = coco_string_create(L"\"out\" expected"); break;
			case 15: s = coco_string_create(L"\"inout\" expected"); break;
			case 16: s = coco_string_create(L"\"wire\" expected"); break;
			case 17: s = coco_string_create(L"\"signal\" expected"); break;
			case 18: s = coco_string_create(L"\"[\" expected"); break;
			case 19: s = coco_string_create(L"\"]\" expected"); break;
			case 20: s = coco_string_create(L"\";\" expected"); break;
			case 21: s = coco_string_create(L"\"call\" expected"); break;
			case 22: s = coco_string_create(L"\"uncall\" expected"); break;
			case 23: s = coco_string_create(L"\"for\" expected"); break;
			case 24: s = coco_string_create(L"\"=\" expected"); break;
			case 25: s = coco_string_create(L"\"to\" expected"); break;
			case 26: s = coco_string_create(L"\"step\" expected"); break;
			case 27: s = coco_string_create(L"\"do\" expected"); break;
			case 28: s = coco_string_create(L"\"rof\" expected"); break;
			case 29: s = coco_string_create(L"\"if\" expected"); break;
			case 30: s = coco_string_create(L"\"then\" expected"); break;
			case 31: s = coco_string_create(L"\"else\" expected"); break;
			case 32: s = coco_string_create(L"\"fi\" expected"); break;
			case 33: s = coco_string_create(L"\"~\" expected"); break;
			case 34: s = coco_string_create(L"\"++\" expected"); break;
			case 35: s = coco_string_create(L"\"--\" expected"); break;
			case 36: s = coco_string_create(L"\"^\" expected"); break;
			case 37: s = coco_string_create(L"\"<=>\" expected"); break;
			case 38: s = coco_string_create(L"\"skip\" expected"); break;
			case 39: s = coco_string_create(L"\".\" expected"); break;
			case 40: s = coco_string_create(L"\":\" expected"); break;
			case 41: s = coco_string_create(L"\"%\" expected"); break;
			case 42: s = coco_string_create(L"\"*>\" expected"); break;
			case 43: s = coco_string_create(L"\"&&\" expected"); break;
			case 44: s = coco_string_create(L"\"||\" expected"); break;
			case 45: s = coco_string_create(L"\"&\" expected"); break;
			case 46: s = coco_string_create(L"\"|\" expected"); break;
			case 47: s = coco_string_create(L"\"<\" expected"); break;
			case 48: s = coco_string_create(L"\">\" expected"); break;
			case 49: s = coco_string_create(L"\"!=\" expected"); break;
			case 50: s = coco_string_create(L"\"<=\" expected"); break;
			case 51: s = coco_string_create(L"\">=\" expected"); break;
			case 52: s = coco_string_create(L"\"!\" expected"); break;
			case 53: s = coco_string_create(L"\"<<\" expected"); break;
			case 54: s = coco_string_create(L"\">>\" expected"); break;
			case 55: s = coco_string_create(L"??? expected"); break;
			case 56: s = coco_string_create(L"invalid Number"); break;
			case 57: s = coco_string_create(L"invalid Number"); break;
			case 58: s = coco_string_create(L"invalid SignalList"); break;
			case 59: s = coco_string_create(L"invalid Parameter"); break;
			case 60: s = coco_string_create(L"invalid Statement"); break;
			case 61: s = coco_string_create(L"invalid CallStatement"); break;
			case 62: s = coco_string_create(L"invalid UnaryStatement"); break;
			case 63: s = coco_string_create(L"invalid AssignStatement"); break;
			case 64: s = coco_string_create(L"invalid Expression"); break;
			case 65: s = coco_string_create(L"invalid BinaryExpression"); break;
			case 66: s = coco_string_create(L"invalid ShiftExpression"); break;
			case 67: s = coco_string_create(L"invalid UnaryExpression"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}

} // namespace

